{
  "address": "0x5BaE0667293511B51514B496724A911fdC8637C7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "chainID",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "initialRelayers",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "initialRelayerThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "destinationChainID",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "resourceID",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "depositNonce",
          "type": "uint64"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "originChainID",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "depositNonce",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "enum Bridge.ProposalStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "resourceID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "dataHash",
          "type": "bytes32"
        }
      ],
      "name": "ProposalEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "originChainID",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "depositNonce",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "enum Bridge.ProposalStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "resourceID",
          "type": "bytes32"
        }
      ],
      "name": "ProposalVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "RelayerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "RelayerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "RelayerThresholdChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAYER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_chainID",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "_depositCounts",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "_depositRecords",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_expiry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "",
          "type": "uint72"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_hasVotedOnProposal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint72",
          "name": "",
          "type": "uint72"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "_proposals",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "_resourceID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_dataHash",
          "type": "bytes32"
        },
        {
          "internalType": "enum Bridge.ProposalStatus",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_proposedBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_relayerThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "_resourceIDToHandlerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_totalProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_totalRelayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayerAddress",
          "type": "address"
        }
      ],
      "name": "adminAddRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "adminChangeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "adminChangeRelayerThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminPauseTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayerAddress",
          "type": "address"
        }
      ],
      "name": "adminRemoveRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handlerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "adminSetBurnable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handlerAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "resourceID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "depositFunctionSig",
          "type": "bytes4"
        },
        {
          "internalType": "bytes4",
          "name": "executeFunctionSig",
          "type": "bytes4"
        }
      ],
      "name": "adminSetGenericResource",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handlerAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "resourceID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "adminSetResource",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminUnpauseTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handlerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOrTokenID",
          "type": "uint256"
        }
      ],
      "name": "adminWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "chainID",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "depositNonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "dataHash",
          "type": "bytes32"
        }
      ],
      "name": "cancelProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "destinationChainID",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "resourceID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "chainID",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "depositNonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "resourceID",
          "type": "bytes32"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "originChainID",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "depositNonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "dataHash",
          "type": "bytes32"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "_resourceID",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_dataHash",
              "type": "bytes32"
            },
            {
              "internalType": "address[]",
              "name": "_yesVotes",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "_noVotes",
              "type": "address[]"
            },
            {
              "internalType": "enum Bridge.ProposalStatus",
              "name": "_status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "_proposedBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct Bridge.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "isRelayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "renounceAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable[]",
          "name": "addrs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "transferFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "chainID",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "depositNonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "resourceID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "dataHash",
          "type": "bytes32"
        }
      ],
      "name": "voteProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd5ddcdf479b8e3eb4f6d08fe15d5d5d408f9456512be9226ff577e6d713160b4",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0x5BaE0667293511B51514B496724A911fdC8637C7",
    "transactionIndex": 14,
    "gasUsed": "2630598",
    "logsBloom": "0x
    "blockHash": "0xb0e9c6629702ea0c9f90e7a179c02a340aa1d73ba8c3f26fe5a7d53e0b3f5b5d",
    "transactionHash": "0xd5ddcdf479b8e3eb4f6d08fe15d5d5d408f9456512be9226ff577e6d713160b4",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 8539974,
        "transactionHash": "0xd5ddcdf479b8e3eb4f6d08fe15d5d5d408f9456512be9226ff577e6d713160b4",
        "address": "0x5BaE0667293511B51514B496724A911fdC8637C7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009a8f92a830a5cb89a3816e3d267cb7791c16b04d",
          "0x0000000000000000000000009a8f92a830a5cb89a3816e3d267cb7791c16b04d"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xb0e9c6629702ea0c9f90e7a179c02a340aa1d73ba8c3f26fe5a7d53e0b3f5b5d"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 8539974,
        "transactionHash": "0xd5ddcdf479b8e3eb4f6d08fe15d5d5d408f9456512be9226ff577e6d713160b4",
        "address": "0x5BaE0667293511B51514B496724A911fdC8637C7",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xb0e9c6629702ea0c9f90e7a179c02a340aa1d73ba8c3f26fe5a7d53e0b3f5b5d"
      },
      {
        "transactionIndex": 14,
        "blockNumber": 8539974,
        "transactionHash": "0xd5ddcdf479b8e3eb4f6d08fe15d5d5d408f9456512be9226ff577e6d713160b4",
        "address": "0x5BaE0667293511B51514B496724A911fdC8637C7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4",
          "0x0000000000000000000000009a8f92a830a5cb89a3816e3d267cb7791c16b04d",
          "0x0000000000000000000000009a8f92a830a5cb89a3816e3d267cb7791c16b04d"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0xb0e9c6629702ea0c9f90e7a179c02a340aa1d73ba8c3f26fe5a7d53e0b3f5b5d"
      }
    ],
    "blockNumber": 8539974,
    "cumulativeGasUsed": "3802140",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "4",
    [
      "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D"
    ],
    1,
    0,
    100
  ],
  "solcInputHash": "87af3bddb96fa5cfcfc99d0e6fd39498",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"initialRelayers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"initialRelayerThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"enum Bridge.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"ProposalEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"enum Bridge.ProposalStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"}],\"name\":\"ProposalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"RelayerThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_chainID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_depositCounts\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"_depositRecords\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_expiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_hasVotedOnProposal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint72\",\"name\":\"\",\"type\":\"uint72\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum Bridge.ProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_proposedBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_relayerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_resourceIDToHandlerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalRelayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminAddRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"adminChangeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"adminChangeRelayerThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminPauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayerAddress\",\"type\":\"address\"}],\"name\":\"adminRemoveRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetBurnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"depositFunctionSig\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"executeFunctionSig\",\"type\":\"bytes4\"}],\"name\":\"adminSetGenericResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"adminSetResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminUnpauseTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handlerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOrTokenID\",\"type\":\"uint256\"}],\"name\":\"adminWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"cancelProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"originChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"_resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_dataHash\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_yesVotes\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_noVotes\",\"type\":\"address[]\"},{\"internalType\":\"enum Bridge.ProposalStatus\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_proposedBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct Bridge.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"isRelayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"renounceAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"addrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"chainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataHash\",\"type\":\"bytes32\"}],\"name\":\"voteProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ChainSafe Systems.\",\"details\":\"Copied directly from here: https://github.com/ChainSafe/chainbridge-solidity/releases/tag/v1.0.0 except for  one small change to the imported Pausable and SafeMath contracts. We replaced local implementations with  openzeppelin/contracts versions.\",\"kind\":\"dev\",\"methods\":{\"adminAddRelayer(address)\":{\"params\":{\"relayerAddress\":\"Address of relayer to be added.\"}},\"adminChangeFee(uint256)\":{\"params\":{\"newFee\":\"Value {_fee} will be updated to.\"}},\"adminChangeRelayerThreshold(uint256)\":{\"params\":{\"newThreshold\":\"Value {_relayerThreshold} will be changed to.\"}},\"adminRemoveRelayer(address)\":{\"params\":{\"relayerAddress\":\"Address of relayer to be removed.\"}},\"adminSetBurnable(address,address)\":{\"params\":{\"handlerAddress\":\"Address of handler resource will be set for.\",\"tokenAddress\":\"Address of contract to be called when a deposit is made and a deposited is executed.\"}},\"adminSetGenericResource(address,bytes32,address,bytes4,bytes4)\":{\"params\":{\"contractAddress\":\"Address of contract to be called when a deposit is made and a deposited is executed.\",\"handlerAddress\":\"Address of handler resource will be set for.\",\"resourceID\":\"ResourceID to be used when making deposits.\"}},\"adminSetResource(address,bytes32,address)\":{\"params\":{\"handlerAddress\":\"Address of handler resource will be set for.\",\"resourceID\":\"ResourceID to be used when making deposits.\",\"tokenAddress\":\"Address of contract to be called when a deposit is made and a deposited is executed.\"}},\"adminWithdraw(address,address,address,uint256)\":{\"params\":{\"amountOrTokenID\":\"Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.\",\"handlerAddress\":\"Address of handler to withdraw from.\",\"recipient\":\"Address to withdraw tokens to.\",\"tokenAddress\":\"Address of token to withdraw.\"}},\"cancelProposal(uint8,uint64,bytes32)\":{\"params\":{\"chainID\":\"ID of chain deposit originated from.\",\"dataHash\":\"Hash of data originally provided when deposit was made.\",\"depositNonce\":\"ID of deposited generated by origin Bridge contract.\"}},\"constructor\":{\"params\":{\"chainID\":\"ID of chain the Bridge contract exists on.\",\"initialRelayerThreshold\":\"Number of votes needed for a deposit proposal to be considered passed.\",\"initialRelayers\":\"Addresses that should be initially granted the relayer role.\"}},\"deposit(uint8,bytes32,bytes)\":{\"params\":{\"data\":\"Additional data to be passed to specified handler.\",\"destinationChainID\":\"ID of chain deposit will be bridged to.\",\"resourceID\":\"ResourceID used to find address of handler to be used for deposit.\"}},\"executeProposal(uint8,uint64,bytes,bytes32)\":{\"params\":{\"chainID\":\"ID of chain deposit originated from.\",\"data\":\"Data originally provided when deposit was made.\",\"depositNonce\":\"ID of deposited generated by origin Bridge contract.\",\"resourceID\":\"ResourceID to be used when making deposits.\"}},\"getProposal(uint8,uint64,bytes32)\":{\"params\":{\"dataHash\":\"Hash of data to be provided when deposit proposal is executed.\",\"depositNonce\":\"ID of proposal generated by proposal's origin Bridge contract.\",\"originChainID\":\"Chain ID deposit originated from.\"},\"returns\":{\"_0\":\"Proposal which consists of: - _dataHash Hash of data to be provided when deposit proposal is executed. - _yesVotes Number of votes in favor of proposal. - _noVotes Number of votes against proposal. - _status Current status of proposal.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isRelayer(address)\":{\"params\":{\"relayer\":\"Address to check.\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceAdmin(address)\":{\"params\":{\"newAdmin\":\"Address that admin role will be granted to.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferFunds(address[],uint256[])\":{\"params\":{\"addrs\":\"Array of addresses to transfer {amounts} to.\",\"amounts\":\"Array of amonuts to transfer to {addrs}.\"}},\"voteProposal(uint8,uint64,bytes32,bytes32)\":{\"params\":{\"chainID\":\"ID of chain deposit originated from.\",\"dataHash\":\"Hash of data provided when deposit was made.\",\"depositNonce\":\"ID of deposited generated by origin Bridge contract.\"}}},\"title\":\"Facilitates deposits, creation and votiing of deposit proposals, and deposit executions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"adminAddRelayer(address)\":{\"notice\":\"Grants {relayerAddress} the relayer role and increases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerAdded} event.\"},\"adminChangeFee(uint256)\":{\"notice\":\"Changes deposit fee.Only callable by admin.\"},\"adminChangeRelayerThreshold(uint256)\":{\"notice\":\"Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event.\"},\"adminPauseTransfers()\":{\"notice\":\"Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.\"},\"adminRemoveRelayer(address)\":{\"notice\":\"Removes relayer role for {relayerAddress} and decreases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerRemoved} event.\"},\"adminSetBurnable(address,address)\":{\"notice\":\"Sets a resource as burnable for handler contracts that use the IERCHandler interface.Only callable by an address that currently has the admin role.\"},\"adminSetGenericResource(address,bytes32,address,bytes4,bytes4)\":{\"notice\":\"Sets a new resource for handler contracts that use the IGenericHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.\"},\"adminSetResource(address,bytes32,address)\":{\"notice\":\"Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role.\"},\"adminUnpauseTransfers()\":{\"notice\":\"Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role.\"},\"adminWithdraw(address,address,address,uint256)\":{\"notice\":\"Used to manually withdraw funds from ERC safes.\"},\"cancelProposal(uint8,uint64,bytes32)\":{\"notice\":\"Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}.\"},\"constructor\":{\"notice\":\"Initializes Bridge, creates and grants {msg.sender} the admin role, creates and grants {initialRelayers} the relayer role.\"},\"deposit(uint8,bytes32,bytes)\":{\"notice\":\"Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event.\"},\"executeProposal(uint8,uint64,bytes,bytes32)\":{\"notice\":\"Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must have Passed status.Hash of {data} must equal proposal's {dataHash}.Emits {ProposalEvent} event with status {Executed}.\"},\"getProposal(uint8,uint64,bytes32)\":{\"notice\":\"Returns a proposal.\"},\"isRelayer(address)\":{\"notice\":\"Returns true if {relayer} has the relayer role.\"},\"renounceAdmin(address)\":{\"notice\":\"Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role.\"},\"transferFunds(address[],uint256[])\":{\"notice\":\"Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1. This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.\"},\"voteProposal(uint8,uint64,bytes32,bytes32)\":{\"notice\":\"When called, {msg.sender} will be marked as voting in favor of proposal.Only callable by relayers when Bridge is not paused.Proposal must not have already been passed or executed.{msg.sender} must not have already voted on proposal.Emits {ProposalEvent} event with status indicating the proposal status.Emits {ProposalVote} event.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chainbridge/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":199},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                Strings.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                Strings.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x98fac37221212c8f126f198d262a4df86394bd1a9969f61e40739fe8ac013dd8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xab1f67e4c96dfe0e3875d22883c3dee5411914f40ce0c54ef407f030d803512e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/chainbridge/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./IDepositExecute.sol\\\";\\nimport \\\"./IBridge.sol\\\";\\nimport \\\"./IERCHandler.sol\\\";\\nimport \\\"./IGenericHandler.sol\\\";\\n\\n/**\\n    @title Facilitates deposits, creation and votiing of deposit proposals, and deposit executions.\\n    @dev Copied directly from here: https://github.com/ChainSafe/chainbridge-solidity/releases/tag/v1.0.0 except for \\n         one small change to the imported Pausable and SafeMath contracts. We replaced local implementations with \\n         openzeppelin/contracts versions.\\n    @author ChainSafe Systems.\\n */\\ncontract Bridge is Pausable, AccessControl {\\n    using SafeMath for uint256;\\n\\n    uint8 public _chainID;\\n    uint256 public _relayerThreshold;\\n    uint256 public _totalRelayers;\\n    uint256 public _totalProposals;\\n    uint256 public _fee;\\n    uint256 public _expiry;\\n\\n    enum Vote { No, Yes }\\n\\n    enum ProposalStatus { Inactive, Active, Passed, Executed, Cancelled }\\n\\n    struct Proposal {\\n        bytes32 _resourceID;\\n        bytes32 _dataHash;\\n        address[] _yesVotes;\\n        address[] _noVotes;\\n        ProposalStatus _status;\\n        uint256 _proposedBlock;\\n    }\\n\\n    // destinationChainID => number of deposits\\n    mapping(uint8 => uint64) public _depositCounts;\\n    // resourceID => handler address\\n    mapping(bytes32 => address) public _resourceIDToHandlerAddress;\\n    // depositNonce => destinationChainID => bytes\\n    mapping(uint64 => mapping(uint8 => bytes)) public _depositRecords;\\n    // destinationChainID + depositNonce => dataHash => Proposal\\n    mapping(uint72 => mapping(bytes32 => Proposal)) public _proposals;\\n    // destinationChainID + depositNonce => dataHash => relayerAddress => bool\\n    mapping(uint72 => mapping(bytes32 => mapping(address => bool))) public _hasVotedOnProposal;\\n\\n    event RelayerThresholdChanged(uint256 indexed newThreshold);\\n    event RelayerAdded(address indexed relayer);\\n    event RelayerRemoved(address indexed relayer);\\n    event Deposit(uint8 indexed destinationChainID, bytes32 indexed resourceID, uint64 indexed depositNonce);\\n    event ProposalEvent(\\n        uint8 indexed originChainID,\\n        uint64 indexed depositNonce,\\n        ProposalStatus indexed status,\\n        bytes32 resourceID,\\n        bytes32 dataHash\\n    );\\n\\n    event ProposalVote(\\n        uint8 indexed originChainID,\\n        uint64 indexed depositNonce,\\n        ProposalStatus indexed status,\\n        bytes32 resourceID\\n    );\\n\\n    bytes32 public constant RELAYER_ROLE = keccak256(\\\"RELAYER_ROLE\\\");\\n\\n    modifier onlyAdmin() {\\n        _onlyAdmin();\\n        _;\\n    }\\n\\n    modifier onlyAdminOrRelayer() {\\n        _onlyAdminOrRelayer();\\n        _;\\n    }\\n\\n    modifier onlyRelayers() {\\n        _onlyRelayers();\\n        _;\\n    }\\n\\n    function _onlyAdminOrRelayer() private view {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(RELAYER_ROLE, msg.sender),\\n            \\\"sender is not relayer or admin\\\"\\n        );\\n    }\\n\\n    function _onlyAdmin() private view {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"sender doesn't have admin role\\\");\\n    }\\n\\n    function _onlyRelayers() private view {\\n        require(hasRole(RELAYER_ROLE, msg.sender), \\\"sender doesn't have relayer role\\\");\\n    }\\n\\n    /**\\n        @notice Initializes Bridge, creates and grants {msg.sender} the admin role,\\n        creates and grants {initialRelayers} the relayer role.\\n        @param chainID ID of chain the Bridge contract exists on.\\n        @param initialRelayers Addresses that should be initially granted the relayer role.\\n        @param initialRelayerThreshold Number of votes needed for a deposit proposal to be considered passed.\\n     */\\n    constructor(\\n        uint8 chainID,\\n        address[] memory initialRelayers,\\n        uint256 initialRelayerThreshold,\\n        uint256 fee,\\n        uint256 expiry\\n    ) {\\n        _chainID = chainID;\\n        _relayerThreshold = initialRelayerThreshold;\\n        _fee = fee;\\n        _expiry = expiry;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setRoleAdmin(RELAYER_ROLE, DEFAULT_ADMIN_ROLE);\\n\\n        for (uint256 i; i < initialRelayers.length; i++) {\\n            grantRole(RELAYER_ROLE, initialRelayers[i]);\\n            _totalRelayers++;\\n        }\\n    }\\n\\n    /**\\n        @notice Returns true if {relayer} has the relayer role.\\n        @param relayer Address to check.\\n     */\\n    function isRelayer(address relayer) external view returns (bool) {\\n        return hasRole(RELAYER_ROLE, relayer);\\n    }\\n\\n    /**\\n        @notice Removes admin role from {msg.sender} and grants it to {newAdmin}.\\n        @notice Only callable by an address that currently has the admin role.\\n        @param newAdmin Address that admin role will be granted to.\\n     */\\n    function renounceAdmin(address newAdmin) external onlyAdmin {\\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n        @notice Pauses deposits, proposal creation and voting, and deposit executions.\\n        @notice Only callable by an address that currently has the admin role.\\n     */\\n    function adminPauseTransfers() external onlyAdmin {\\n        _pause();\\n    }\\n\\n    /**\\n        @notice Unpauses deposits, proposal creation and voting, and deposit executions.\\n        @notice Only callable by an address that currently has the admin role.\\n     */\\n    function adminUnpauseTransfers() external onlyAdmin {\\n        _unpause();\\n    }\\n\\n    /**\\n        @notice Modifies the number of votes required for a proposal to be considered passed.\\n        @notice Only callable by an address that currently has the admin role.\\n        @param newThreshold Value {_relayerThreshold} will be changed to.\\n        @notice Emits {RelayerThresholdChanged} event.\\n     */\\n    function adminChangeRelayerThreshold(uint256 newThreshold) external onlyAdmin {\\n        _relayerThreshold = newThreshold;\\n        emit RelayerThresholdChanged(newThreshold);\\n    }\\n\\n    /**\\n        @notice Grants {relayerAddress} the relayer role and increases {_totalRelayer} count.\\n        @notice Only callable by an address that currently has the admin role.\\n        @param relayerAddress Address of relayer to be added.\\n        @notice Emits {RelayerAdded} event.\\n     */\\n    function adminAddRelayer(address relayerAddress) external onlyAdmin {\\n        require(!hasRole(RELAYER_ROLE, relayerAddress), \\\"addr already has relayer role!\\\");\\n        grantRole(RELAYER_ROLE, relayerAddress);\\n        emit RelayerAdded(relayerAddress);\\n        _totalRelayers++;\\n    }\\n\\n    /**\\n        @notice Removes relayer role for {relayerAddress} and decreases {_totalRelayer} count.\\n        @notice Only callable by an address that currently has the admin role.\\n        @param relayerAddress Address of relayer to be removed.\\n        @notice Emits {RelayerRemoved} event.\\n     */\\n    function adminRemoveRelayer(address relayerAddress) external onlyAdmin {\\n        require(hasRole(RELAYER_ROLE, relayerAddress), \\\"addr doesn't have relayer role!\\\");\\n        revokeRole(RELAYER_ROLE, relayerAddress);\\n        emit RelayerRemoved(relayerAddress);\\n        _totalRelayers--;\\n    }\\n\\n    /**\\n        @notice Sets a new resource for handler contracts that use the IERCHandler interface,\\n        and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\\n        @notice Only callable by an address that currently has the admin role.\\n        @param handlerAddress Address of handler resource will be set for.\\n        @param resourceID ResourceID to be used when making deposits.\\n        @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\\n     */\\n    function adminSetResource(\\n        address handlerAddress,\\n        bytes32 resourceID,\\n        address tokenAddress\\n    ) external onlyAdmin {\\n        _resourceIDToHandlerAddress[resourceID] = handlerAddress;\\n        IERCHandler handler = IERCHandler(handlerAddress);\\n        handler.setResource(resourceID, tokenAddress);\\n    }\\n\\n    /**\\n        @notice Sets a new resource for handler contracts that use the IGenericHandler interface,\\n        and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\\n        @notice Only callable by an address that currently has the admin role.\\n        @param handlerAddress Address of handler resource will be set for.\\n        @param resourceID ResourceID to be used when making deposits.\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\n     */\\n    function adminSetGenericResource(\\n        address handlerAddress,\\n        bytes32 resourceID,\\n        address contractAddress,\\n        bytes4 depositFunctionSig,\\n        bytes4 executeFunctionSig\\n    ) external onlyAdmin {\\n        _resourceIDToHandlerAddress[resourceID] = handlerAddress;\\n        IGenericHandler handler = IGenericHandler(handlerAddress);\\n        handler.setResource(resourceID, contractAddress, depositFunctionSig, executeFunctionSig);\\n    }\\n\\n    /**\\n        @notice Sets a resource as burnable for handler contracts that use the IERCHandler interface.\\n        @notice Only callable by an address that currently has the admin role.\\n        @param handlerAddress Address of handler resource will be set for.\\n        @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\\n     */\\n    function adminSetBurnable(address handlerAddress, address tokenAddress) external onlyAdmin {\\n        IERCHandler handler = IERCHandler(handlerAddress);\\n        handler.setBurnable(tokenAddress);\\n    }\\n\\n    /**\\n        @notice Returns a proposal.\\n        @param originChainID Chain ID deposit originated from.\\n        @param depositNonce ID of proposal generated by proposal's origin Bridge contract.\\n        @param dataHash Hash of data to be provided when deposit proposal is executed.\\n        @return Proposal which consists of:\\n        - _dataHash Hash of data to be provided when deposit proposal is executed.\\n        - _yesVotes Number of votes in favor of proposal.\\n        - _noVotes Number of votes against proposal.\\n        - _status Current status of proposal.\\n     */\\n    function getProposal(\\n        uint8 originChainID,\\n        uint64 depositNonce,\\n        bytes32 dataHash\\n    ) external view returns (Proposal memory) {\\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(originChainID);\\n        return _proposals[nonceAndID][dataHash];\\n    }\\n\\n    /**\\n        @notice Changes deposit fee.\\n        @notice Only callable by admin.\\n        @param newFee Value {_fee} will be updated to.\\n     */\\n    function adminChangeFee(uint256 newFee) external onlyAdmin {\\n        require(_fee != newFee, \\\"Current fee is equal to new fee\\\");\\n        _fee = newFee;\\n    }\\n\\n    /**\\n        @notice Used to manually withdraw funds from ERC safes.\\n        @param handlerAddress Address of handler to withdraw from.\\n        @param tokenAddress Address of token to withdraw.\\n        @param recipient Address to withdraw tokens to.\\n        @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.\\n     */\\n    function adminWithdraw(\\n        address handlerAddress,\\n        address tokenAddress,\\n        address recipient,\\n        uint256 amountOrTokenID\\n    ) external onlyAdmin {\\n        IERCHandler handler = IERCHandler(handlerAddress);\\n        handler.withdraw(tokenAddress, recipient, amountOrTokenID);\\n    }\\n\\n    /**\\n        @notice Initiates a transfer using a specified handler contract.\\n        @notice Only callable when Bridge is not paused.\\n        @param destinationChainID ID of chain deposit will be bridged to.\\n        @param resourceID ResourceID used to find address of handler to be used for deposit.\\n        @param data Additional data to be passed to specified handler.\\n        @notice Emits {Deposit} event.\\n     */\\n    function deposit(\\n        uint8 destinationChainID,\\n        bytes32 resourceID,\\n        bytes calldata data\\n    ) external payable whenNotPaused {\\n        require(msg.value == _fee, \\\"Incorrect fee supplied\\\");\\n\\n        address handler = _resourceIDToHandlerAddress[resourceID];\\n        require(handler != address(0), \\\"resourceID not mapped to handler\\\");\\n\\n        uint64 depositNonce = ++_depositCounts[destinationChainID];\\n        _depositRecords[depositNonce][destinationChainID] = data;\\n\\n        IDepositExecute depositHandler = IDepositExecute(handler);\\n        depositHandler.deposit(resourceID, destinationChainID, depositNonce, msg.sender, data);\\n\\n        emit Deposit(destinationChainID, resourceID, depositNonce);\\n    }\\n\\n    /**\\n        @notice When called, {msg.sender} will be marked as voting in favor of proposal.\\n        @notice Only callable by relayers when Bridge is not paused.\\n        @param chainID ID of chain deposit originated from.\\n        @param depositNonce ID of deposited generated by origin Bridge contract.\\n        @param dataHash Hash of data provided when deposit was made.\\n        @notice Proposal must not have already been passed or executed.\\n        @notice {msg.sender} must not have already voted on proposal.\\n        @notice Emits {ProposalEvent} event with status indicating the proposal status.\\n        @notice Emits {ProposalVote} event.\\n     */\\n    function voteProposal(\\n        uint8 chainID,\\n        uint64 depositNonce,\\n        bytes32 resourceID,\\n        bytes32 dataHash\\n    ) external onlyRelayers whenNotPaused {\\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(chainID);\\n        Proposal storage proposal = _proposals[nonceAndID][dataHash];\\n\\n        require(_resourceIDToHandlerAddress[resourceID] != address(0), \\\"no handler for resourceID\\\");\\n        require(uint256(proposal._status) <= 1, \\\"proposal already passed/executed/cancelled\\\");\\n        require(!_hasVotedOnProposal[nonceAndID][dataHash][msg.sender], \\\"relayer already voted\\\");\\n\\n        if (uint256(proposal._status) == 0) {\\n            ++_totalProposals;\\n            _proposals[nonceAndID][dataHash] = Proposal({\\n                _resourceID: resourceID,\\n                _dataHash: dataHash,\\n                _yesVotes: new address[](1),\\n                _noVotes: new address[](0),\\n                _status: ProposalStatus.Active,\\n                _proposedBlock: block.number\\n            });\\n\\n            proposal._yesVotes[0] = msg.sender;\\n            emit ProposalEvent(chainID, depositNonce, ProposalStatus.Active, resourceID, dataHash);\\n        } else {\\n            if (block.number.sub(proposal._proposedBlock) > _expiry) {\\n                // if the number of blocks that has passed since this proposal was\\n                // submitted exceeds the expiry threshold set, cancel the proposal\\n                proposal._status = ProposalStatus.Cancelled;\\n                emit ProposalEvent(chainID, depositNonce, ProposalStatus.Cancelled, resourceID, dataHash);\\n            } else {\\n                require(dataHash == proposal._dataHash, \\\"datahash mismatch\\\");\\n                proposal._yesVotes.push(msg.sender);\\n            }\\n        }\\n        if (proposal._status != ProposalStatus.Cancelled) {\\n            _hasVotedOnProposal[nonceAndID][dataHash][msg.sender] = true;\\n            emit ProposalVote(chainID, depositNonce, proposal._status, resourceID);\\n\\n            // If _depositThreshold is set to 1, then auto finalize\\n            // or if _relayerThreshold has been exceeded\\n            if (_relayerThreshold <= 1 || proposal._yesVotes.length >= _relayerThreshold) {\\n                proposal._status = ProposalStatus.Passed;\\n\\n                emit ProposalEvent(chainID, depositNonce, ProposalStatus.Passed, resourceID, dataHash);\\n            }\\n        }\\n    }\\n\\n    /**\\n        @notice Executes a deposit proposal that is considered passed using a specified handler contract.\\n        @notice Only callable by relayers when Bridge is not paused.\\n        @param chainID ID of chain deposit originated from.\\n        @param depositNonce ID of deposited generated by origin Bridge contract.\\n        @param dataHash Hash of data originally provided when deposit was made.\\n        @notice Proposal must be past expiry threshold.\\n        @notice Emits {ProposalEvent} event with status {Cancelled}.\\n     */\\n    function cancelProposal(\\n        uint8 chainID,\\n        uint64 depositNonce,\\n        bytes32 dataHash\\n    ) public onlyAdminOrRelayer {\\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(chainID);\\n        Proposal storage proposal = _proposals[nonceAndID][dataHash];\\n\\n        require(proposal._status != ProposalStatus.Cancelled, \\\"Proposal already cancelled\\\");\\n        require(block.number.sub(proposal._proposedBlock) > _expiry, \\\"Proposal not at expiry threshold\\\");\\n\\n        proposal._status = ProposalStatus.Cancelled;\\n        emit ProposalEvent(chainID, depositNonce, ProposalStatus.Cancelled, proposal._resourceID, proposal._dataHash);\\n    }\\n\\n    /**\\n        @notice Executes a deposit proposal that is considered passed using a specified handler contract.\\n        @notice Only callable by relayers when Bridge is not paused.\\n        @param chainID ID of chain deposit originated from.\\n        @param resourceID ResourceID to be used when making deposits.\\n        @param depositNonce ID of deposited generated by origin Bridge contract.\\n        @param data Data originally provided when deposit was made.\\n        @notice Proposal must have Passed status.\\n        @notice Hash of {data} must equal proposal's {dataHash}.\\n        @notice Emits {ProposalEvent} event with status {Executed}.\\n     */\\n    function executeProposal(\\n        uint8 chainID,\\n        uint64 depositNonce,\\n        bytes calldata data,\\n        bytes32 resourceID\\n    ) external onlyRelayers whenNotPaused {\\n        address handler = _resourceIDToHandlerAddress[resourceID];\\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(chainID);\\n        bytes32 dataHash = keccak256(abi.encodePacked(handler, data));\\n        Proposal storage proposal = _proposals[nonceAndID][dataHash];\\n\\n        require(proposal._status != ProposalStatus.Inactive, \\\"proposal is not active\\\");\\n        require(proposal._status == ProposalStatus.Passed, \\\"proposal already transferred\\\");\\n        require(dataHash == proposal._dataHash, \\\"data doesn't match datahash\\\");\\n\\n        proposal._status = ProposalStatus.Executed;\\n\\n        IDepositExecute depositHandler = IDepositExecute(_resourceIDToHandlerAddress[proposal._resourceID]);\\n        depositHandler.executeProposal(proposal._resourceID, data);\\n\\n        emit ProposalEvent(chainID, depositNonce, proposal._status, proposal._resourceID, proposal._dataHash);\\n    }\\n\\n    /**\\n        @notice Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1.\\n        This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.\\n        @param addrs Array of addresses to transfer {amounts} to.\\n        @param amounts Array of amonuts to transfer to {addrs}.\\n     */\\n    function transferFunds(address payable[] calldata addrs, uint256[] calldata amounts) external onlyAdmin {\\n        for (uint256 i = 0; i < addrs.length; i++) {\\n            addrs[i].transfer(amounts[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x012c91d3802899d46bb43731f087ea7bdac5a80641dc66d9bc828058ea4e34c3\",\"license\":\"AGPL-3.0-only\"},\"contracts/chainbridge/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n    @title Interface for Bridge contract.\\n    @dev Copied directly from here: https://github.com/ChainSafe/chainbridge-solidity/releases/tag/v1.0.0 except for \\n         the addition of `deposit()` so that this contract can be called from Sink and Source Oracle contracts.\\n    @author ChainSafe Systems.\\n */\\ninterface IBridge {\\n    /**\\n        @notice Exposing getter for {_chainID} instead of forcing the use of call.\\n        @return uint8 The {_chainID} that is currently set for the Bridge contract.\\n     */\\n    function _chainID() external returns (uint8);\\n\\n    function deposit(\\n        uint8 destinationChainID,\\n        bytes32 resourceID,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0c901fa47d81ce80f1f79cfd02ff3a6bec69a71f931915bfce579f936cfe78c4\",\"license\":\"AGPL-3.0-only\"},\"contracts/chainbridge/IDepositExecute.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n    @title Interface for handler contracts that support deposits and deposit executions.\\n    @dev Copied directly from here: https://github.com/ChainSafe/chainbridge-solidity/releases/tag/v1.0.0.\\n    @author ChainSafe Systems.\\n */\\ninterface IDepositExecute {\\n    /**\\n        @notice It is intended that deposit are made using the Bridge contract.\\n        @param destinationChainID Chain ID deposit is expected to be bridged to.\\n        @param depositNonce This value is generated as an ID by the Bridge contract.\\n        @param depositer Address of account making the deposit in the Bridge contract.\\n        @param data Consists of additional data needed for a specific deposit.\\n     */\\n    function deposit(\\n        bytes32 resourceID,\\n        uint8 destinationChainID,\\n        uint64 depositNonce,\\n        address depositer,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n        @notice It is intended that proposals are executed by the Bridge contract.\\n        @param data Consists of additional data needed for a specific deposit execution.\\n     */\\n    function executeProposal(bytes32 resourceID, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x5e0ef2a9277c27bb0333a52297e9452b00bc46d4787c4dc6964c3d150909fc1e\",\"license\":\"AGPL-3.0-only\"},\"contracts/chainbridge/IERCHandler.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n    @title Interface to be used with handlers that support ERC20s and ERC721s.\\n    @dev Copied directly from here: https://github.com/ChainSafe/chainbridge-solidity/releases/tag/v1.0.0.\\n    @author ChainSafe Systems.\\n */\\ninterface IERCHandler {\\n    /**\\n        @notice Correlates {resourceID} with {contractAddress}.\\n        @param resourceID ResourceID to be used when making deposits.\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\n     */\\n    function setResource(bytes32 resourceID, address contractAddress) external;\\n\\n    /**\\n        @notice Marks {contractAddress} as mintable/burnable.\\n        @param contractAddress Address of contract to be used when making or executing deposits.\\n     */\\n    function setBurnable(address contractAddress) external;\\n\\n    /**\\n        @notice Used to manually release funds from ERC safes.\\n        @param tokenAddress Address of token contract to release.\\n        @param recipient Address to release tokens to.\\n        @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.\\n     */\\n    function withdraw(\\n        address tokenAddress,\\n        address recipient,\\n        uint256 amountOrTokenID\\n    ) external;\\n}\\n\",\"keccak256\":\"0x314d4ebdc520a172b1ea0fa4d4128edbeeb91d1fc8cb2d0f4c84fca10faffbd4\",\"license\":\"AGPL-3.0-only\"},\"contracts/chainbridge/IGenericHandler.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n    @title Interface for handler that handles generic deposits and deposit executions.\\n    @dev Copied directly from here: https://github.com/ChainSafe/chainbridge-solidity/releases/tag/v1.0.0.\\n    @author ChainSafe Systems.\\n */\\ninterface IGenericHandler {\\n    /**\\n        @notice Correlates {resourceID} with {contractAddress}, {depositFunctionSig}, and {executeFunctionSig}.\\n        @param resourceID ResourceID to be used when making deposits.\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\n        @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.\\n        @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.\\n     */\\n    function setResource(\\n        bytes32 resourceID,\\n        address contractAddress,\\n        bytes4 depositFunctionSig,\\n        bytes4 executeFunctionSig\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1f3932a12cb48b423ffb3d1a79a5869293991599e7c4be7eb3294aeb9b632d43\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003317380380620033178339810160408190526200003491620004f2565b6000805460ff1990811682556002805490911660ff881617905560038490556006839055600782905562000069903362000114565b62000085600080516020620032f7833981519152600062000124565b60005b84518110156200010857620000db600080516020620032f7833981519152868381518110620000c757634e487b7160e01b600052603260045260246000fd5b60200260200101516200017b60201b60201c565b60048054906000620000ed8362000734565b91905055508080620000ff9062000734565b91505062000088565b5050505050506200077e565b620001208282620001ab565b5050565b60008281526001602081905260409091200154819060405184907fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff90600090a4600091825260016020819052604090922090910155565b600082815260016020819052604090912001546200019a813362000233565b620001a68383620001ab565b505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620001205760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff1662000120576200027f816001600160a01b03166014620002d960201b62001c311760201c565b6200029583602062001c31620002d9821b17811c565b604051602001620002a8929190620005fc565b60408051601f198184030181529082905262461bcd60e51b8252620002d09160040162000675565b60405180910390fd5b60606000620002ea836002620006c5565b620002f7906002620006aa565b6001600160401b038111156200031d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801562000348576020820181803683370190505b509050600360fc1b816000815181106200037257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110620003b057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000620003d6846002620006c5565b620003e3906001620006aa565b90505b60018111156200047d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106200042757634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106200044c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9362000475816200071a565b9050620003e6565b508315620004ce5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620002d0565b9392505050565b80516001600160a01b0381168114620004ed57600080fd5b919050565b600080600080600060a086880312156200050a578081fd5b855160ff811681146200051b578182fd5b602087810151919650906001600160401b03808211156200053a578384fd5b818901915089601f8301126200054e578384fd5b81518181111562000563576200056362000768565b8060051b604051601f19603f830116810181811085821117156200058b576200058b62000768565b604052828152858101935084860182860187018e1015620005aa578788fd5b8795505b83861015620005d757620005c281620004d5565b855260019590950194938601938601620005ae565b5060408c015160608d01516080909d01519b9e919d509b9a9950975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162000636816017850160208801620006e7565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835162000669816028840160208801620006e7565b01602801949350505050565b602081526000825180602084015262000696816040850160208701620006e7565b601f01601f19169190910160400192915050565b60008219821115620006c057620006c062000752565b500190565b6000816000190483118215151615620006e257620006e262000752565b500290565b60005b8381101562000704578181015183820152602001620006ea565b8381111562000714576000848401525b50505050565b6000816200072c576200072c62000752565b506000190190565b60006000198214156200074b576200074b62000752565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b612b69806200078e6000396000f3fe6080604052600436106102255760003560e01c806380ae1c2811610123578063a9cf69fa116100ab578063cdb0f73a1161006f578063cdb0f73a14610715578063d547741f14610735578063d7a9cd7914610755578063e8437ee71461076b578063ffaac0eb1461078b57600080fd5b8063a9cf69fa14610670578063beab71311461069d578063c5b37c22146106c9578063c5ec8970146106df578063cb10f215146106f557600080fd5b806391d14854116100f257806391d14854146105e3578063926d7d7f146106035780639d5773e0146106255780639d82dd631461063b578063a217fddf1461065b57600080fd5b806380ae1c281461054057806384db809f146105555780638c0c2631146105a357806391c404ac146105c357600080fd5b80634603ae38116101b15780635c975abb116101755780635c975abb146104915780635e1fab0f146104a9578063780cf004146104c95780637febe63f146104e9578063802aabe81461052a57600080fd5b80634603ae38146103805780634b0b919d146103a05780634e056005146103ee578063505987191461040e578063541d55481461047157600080fd5b8063248a9ca3116101f8578063248a9ca3146102b45780632f2ff15d146102f357806336568abe146103135780633ee7094a146103335780634454b20d1461036057600080fd5b806301ffc9a71461022a57806305e2ca171461025f57806317f03ce5146102745780631ff013f114610294575b600080fd5b34801561023657600080fd5b5061024a610245366004612538565b6107a0565b60405190151581526020015b60405180910390f35b61027261026d3660046125e4565b6107d7565b005b34801561028057600080fd5b5061027261028f36600461262f565b6109d4565b3480156102a057600080fd5b506102726102af36600461266a565b610b35565b3480156102c057600080fd5b506102e56102cf3660046124fc565b6000908152600160208190526040909120015490565b604051908152602001610256565b3480156102ff57600080fd5b5061027261030e366004612514565b6110a2565b34801561031f57600080fd5b5061027261032e366004612514565b6110ce565b34801561033f57600080fd5b5061035361034e366004612552565b61114c565b6040516102569190612902565b34801561036c57600080fd5b5061027261037b3660046126ab565b6111f1565b34801561038c57600080fd5b5061027261039b366004612494565b6114d4565b3480156103ac57600080fd5b506103d66103bb3660046125ca565b6008602052600090815260409020546001600160401b031681565b6040516001600160401b039091168152602001610256565b3480156103fa57600080fd5b506102726104093660046124fc565b611594565b34801561041a57600080fd5b50610461610429366004612584565b600b60209081526000928352604080842090915290825290208054600182015460048301546005909301549192909160ff9091169084565b6040516102569493929190612866565b34801561047d57600080fd5b5061024a61048c36600461234e565b6115cf565b34801561049d57600080fd5b5060005460ff1661024a565b3480156104b557600080fd5b506102726104c436600461234e565b6115e9565b3480156104d557600080fd5b506102726104e43660046123a2565b61160a565b3480156104f557600080fd5b5061024a6105043660046125ad565b600c60209081526000938452604080852082529284528284209052825290205460ff1681565b34801561053657600080fd5b506102e560045481565b34801561054c57600080fd5b50610272611686565b34801561056157600080fd5b5061058b6105703660046124fc565b6009602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610256565b3480156105af57600080fd5b506102726105be36600461236a565b611698565b3480156105cf57600080fd5b506102726105de3660046124fc565b611703565b3480156105ef57600080fd5b5061024a6105fe366004612514565b611762565b34801561060f57600080fd5b506102e5600080516020612af483398151915281565b34801561063157600080fd5b506102e560055481565b34801561064757600080fd5b5061027261065636600461234e565b61178d565b34801561066757600080fd5b506102e5600081565b34801561067c57600080fd5b5061069061068b36600461262f565b61185d565b604051610256919061293f565b3480156106a957600080fd5b506002546106b79060ff1681565b60405160ff9091168152602001610256565b3480156106d557600080fd5b506102e560065481565b3480156106eb57600080fd5b506102e560075481565b34801561070157600080fd5b506102726107103660046123f2565b6119ef565b34801561072157600080fd5b5061027261073036600461234e565b611a83565b34801561074157600080fd5b50610272610750366004612514565b611b4c565b34801561076157600080fd5b506102e560035481565b34801561077757600080fd5b50610272610786366004612433565b611b73565b34801561079757600080fd5b50610272611c21565b60006001600160e01b03198216637965db0b60e01b14806107d157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60005460ff16156108035760405162461bcd60e51b81526004016107fa90612915565b60405180910390fd5b600654341461084d5760405162461bcd60e51b8152602060048201526016602482015275125b98dbdc9c9958dd08199959481cdd5c1c1b1a595960521b60448201526064016107fa565b6000838152600960205260409020546001600160a01b0316806108b25760405162461bcd60e51b815260206004820181905260248201527f7265736f757263654944206e6f74206d617070656420746f2068616e646c657260448201526064016107fa565b60ff85166000908152600860205260408120805482906108da906001600160401b0316612aa1565b82546001600160401b038083166101009490940a848102910219909116179092556000908152600a6020908152604080832060ff8b168452909152902090915061092590858561217a565b506040516338995da960e01b815282906001600160a01b038216906338995da99061095e9089908b90879033908c908c906004016128b3565b600060405180830381600087803b15801561097857600080fd5b505af115801561098c573d6000803e3d6000fd5b50505050816001600160401b0316868860ff167fdbb69440df8433824a026ef190652f29929eb64b4d1d5d2a69be8afe3e6eaed860405160405180910390a450505050505050565b6109dc611e19565b68ffffffffffffffff00600883901b1660ff8416176000818152600b6020908152604080832085845290915290206004808083015460ff1690811115610a3257634e487b7160e01b600052602160045260246000fd5b1415610a805760405162461bcd60e51b815260206004820152601a60248201527f50726f706f73616c20616c72656164792063616e63656c6c656400000000000060448201526064016107fa565b6007546005820154610a93904390611e8e565b11610ae05760405162461bcd60e51b815260206004820181905260248201527f50726f706f73616c206e6f7420617420657870697279207468726573686f6c6460448201526064016107fa565b6004818101805460ff191682179055815460018301546040805192835260208301919091526001600160401b0387169160ff891691600080516020612b14833981519152910160405180910390a45050505050565b610b3d611e9a565b60005460ff1615610b605760405162461bcd60e51b81526004016107fa90612915565b68ffffffffffffffff00600884901b1660ff8516176000818152600b6020908152604080832085845282528083208684526009909252909120546001600160a01b0316610bef5760405162461bcd60e51b815260206004820152601960248201527f6e6f2068616e646c657220666f72207265736f7572636549440000000000000060448201526064016107fa565b60048082015460019160ff90911690811115610c1b57634e487b7160e01b600052602160045260246000fd5b1115610c7c5760405162461bcd60e51b815260206004820152602a60248201527f70726f706f73616c20616c7265616479207061737365642f65786563757465646044820152690bd8d85b98d95b1b195960b21b60648201526084016107fa565b68ffffffffffffffffff82166000908152600c60209081526040808320868452825280832033845290915290205460ff1615610cf25760405162461bcd60e51b81526020600482015260156024820152741c995b185e595c88185b1c9958591e481d9bdd1959605a1b60448201526064016107fa565b60048082015460ff1690811115610d1957634e487b7160e01b600052602160045260246000fd5b610ec557600560008154610d2c90612a86565b909155506040805160c0810182528581526020810185905281516001808252818401845291928301918160200160208202803683375050508152604080516000808252602080830184528085019290925260018385018190524360609095019490945268ffffffffffffffffff87168152600b82528281208882528252829020845181558482015193810193909355908301518051610dd192600285019201906121fe565b5060608201518051610ded9160038401916020909101906121fe565b5060808201518160040160006101000a81548160ff02191690836004811115610e2657634e487b7160e01b600052602160045260246000fd5b021790555060a082015181600501559050503381600201600081548110610e5d57634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905560015b60408051868152602081018690526001600160401b0388169160ff8a1691600080516020612b14833981519152910160405180910390a4610f61565b6007546005820154610ed8904390611e8e565b1115610ef2576004818101805460ff191682179055610e89565b80600101548314610f395760405162461bcd60e51b81526020600482015260116024820152700c8c2e8c2d0c2e6d040dad2e6dac2e8c6d607b1b60448201526064016107fa565b600281018054600181018255600091825260209091200180546001600160a01b031916331790555b60048181015460ff1681811115610f8857634e487b7160e01b600052602160045260246000fd5b1461109a5768ffffffffffffffffff82166000908152600c6020908152604080832086845282528083203384529091529020805460ff1916600117905560048082015460ff1690811115610fec57634e487b7160e01b600052602160045260246000fd5b856001600160401b03168760ff167f25f8daaa4635a7729927ba3f5b3d59cc3320aca7c32c9db4e7ca7b95743436408760405161102b91815260200190565b60405180910390a4600160035411158061104b5750600354600282015410155b1561109a5760048101805460ff1916600290811790915560408051868152602081018690526001600160401b0388169160ff8a1691600080516020612b14833981519152910160405180910390a45b505050505050565b600082815260016020819052604090912001546110bf8133611efe565b6110c98383611f62565b505050565b6001600160a01b038116331461113e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107fa565b6111488282611fcd565b5050565b600a6020908152600092835260408084209091529082529020805461117090612a4b565b80601f016020809104026020016040519081016040528092919081815260200182805461119c90612a4b565b80156111e95780601f106111be576101008083540402835291602001916111e9565b820191906000526020600020905b8154815290600101906020018083116111cc57829003601f168201915b505050505081565b6111f9611e9a565b60005460ff161561121c5760405162461bcd60e51b81526004016107fa90612915565b60008181526009602090815260408083205490516001600160a01b039091169268ffffffffffffffff00600889901b1660ff8a161792909161126491859189918991016127cb565b60408051601f19818403018152918152815160209283012068ffffffffffffffffff85166000908152600b84528281208282529093529082209092509060048083015460ff16908111156112c857634e487b7160e01b600052602160045260246000fd5b141561130f5760405162461bcd60e51b815260206004820152601660248201527570726f706f73616c206973206e6f742061637469766560501b60448201526064016107fa565b600260048083015460ff169081111561133857634e487b7160e01b600052602160045260246000fd5b146113855760405162461bcd60e51b815260206004820152601c60248201527f70726f706f73616c20616c7265616479207472616e736665727265640000000060448201526064016107fa565b806001015482146113d85760405162461bcd60e51b815260206004820152601b60248201527f6461746120646f65736e2774206d61746368206461746168617368000000000060448201526064016107fa565b6004818101805460ff1916600317905581546000818152600960205260409081902054905163712467f960e11b81526001600160a01b0390911692839263e248cff292611429928d918d9101612890565b600060405180830381600087803b15801561144357600080fd5b505af1158015611457573d6000803e3d6000fd5b50505060048084015460ff16915081111561148257634e487b7160e01b600052602160045260246000fd5b896001600160401b03168b60ff16600080516020612b14833981519152856000015486600101546040516114c0929190918252602082015260400190565b60405180910390a450505050505050505050565b6114dc612034565b60005b8381101561158d5784848281811061150757634e487b7160e01b600052603260045260246000fd5b905060200201602081019061151c919061234e565b6001600160a01b03166108fc84848481811061154857634e487b7160e01b600052603260045260246000fd5b905060200201359081150290604051600060405180830381858888f1935050505015801561157a573d6000803e3d6000fd5b508061158581612a86565b9150506114df565b5050505050565b61159c612034565b600381905560405181907fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c890600090a250565b60006107d1600080516020612af483398151915283611762565b6115f1612034565b6115fc6000826110a2565b6116076000336110ce565b50565b611612612034565b604051636ce5768960e11b81526001600160a01b03848116600483015283811660248301526044820183905285919082169063d9caed1290606401600060405180830381600087803b15801561166757600080fd5b505af115801561167b573d6000803e3d6000fd5b505050505050505050565b61168e612034565b61169661208b565b565b6116a0612034565b6040516307b7ed9960e01b81526001600160a01b0382811660048301528391908216906307b7ed9990602401600060405180830381600087803b1580156116e657600080fd5b505af11580156116fa573d6000803e3d6000fd5b50505050505050565b61170b612034565b80600654141561175d5760405162461bcd60e51b815260206004820152601f60248201527f43757272656e742066656520697320657175616c20746f206e6577206665650060448201526064016107fa565b600655565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b611795612034565b6117ad600080516020612af483398151915282611762565b6117f95760405162461bcd60e51b815260206004820152601f60248201527f6164647220646f65736e277420686176652072656c6179657220726f6c65210060448201526064016107fa565b611811600080516020612af483398151915282611b4c565b6040516001600160a01b038216907f10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b90600090a26004805490600061185583612a34565b919050555050565b6040805160c08082018352600080835260208084018290526060848601819052808501526080840182905260a0840182905260ff8816600888901b68ffffffffffffffff001617808352600b82528583208784528252918590208551938401865280548452600181015484830152600281018054875181850281018501895281815296979496929486019383018282801561192157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611903575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561198357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611965575b505050918352505060048281015460209092019160ff16908111156119b857634e487b7160e01b600052602160045260246000fd5b60048111156119d757634e487b7160e01b600052602160045260246000fd5b81526020016005820154815250509150509392505050565b6119f7612034565b6000828152600960205260409081902080546001600160a01b0319166001600160a01b038681169182179092559151635c7d1b9b60e11b815260048101859052908316602482015284919063b8fa373690604401600060405180830381600087803b158015611a6557600080fd5b505af1158015611a79573d6000803e3d6000fd5b5050505050505050565b611a8b612034565b611aa3600080516020612af483398151915282611762565b15611af05760405162461bcd60e51b815260206004820152601e60248201527f6164647220616c7265616479206861732072656c6179657220726f6c6521000060448201526064016107fa565b611b08600080516020612af4833981519152826110a2565b6040516001600160a01b038216907f03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c590600090a26004805490600061185583612a86565b60008281526001602081905260409091200154611b698133611efe565b6110c98383611fcd565b611b7b612034565b6000848152600960205260409081902080546001600160a01b0319166001600160a01b038881169182179092559151635dd40c2d60e11b81526004810187905290851660248201526001600160e01b031980851660448301528316606482015286919063bba8185a90608401600060405180830381600087803b158015611c0157600080fd5b505af1158015611c15573d6000803e3d6000fd5b50505050505050505050565b611c29612034565b611696612100565b60606000611c408360026129ce565b611c4b9060026129b6565b6001600160401b03811115611c7057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611c9a576020820181803683370190505b509050600360fc1b81600081518110611cc357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d0057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611d248460026129ce565b611d2f9060016129b6565b90505b6001811115611dc3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d7157634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611d9557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611dbc81612a34565b9050611d32565b508315611e125760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107fa565b9392505050565b611e24600033611762565b80611e425750611e42600080516020612af483398151915233611762565b6116965760405162461bcd60e51b815260206004820152601e60248201527f73656e646572206973206e6f742072656c61796572206f722061646d696e000060448201526064016107fa565b6000611e1282846129ed565b611eb2600080516020612af483398151915233611762565b6116965760405162461bcd60e51b815260206004820181905260248201527f73656e64657220646f65736e277420686176652072656c6179657220726f6c6560448201526064016107fa565b611f088282611762565b61114857611f20816001600160a01b03166014611c31565b611f2b836020611c31565b604051602001611f3c9291906127f7565b60408051601f198184030181529082905262461bcd60e51b82526107fa91600401612902565b611f6c8282611762565b6111485760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b611fd78282611762565b156111485760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61203f600033611762565b6116965760405162461bcd60e51b815260206004820152601e60248201527f73656e64657220646f65736e277420686176652061646d696e20726f6c65000060448201526064016107fa565b60005460ff16156120ae5760405162461bcd60e51b81526004016107fa90612915565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120e33390565b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff166121495760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107fa565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336120e3565b82805461218690612a4b565b90600052602060002090601f0160209004810192826121a857600085556121ee565b82601f106121c15782800160ff198235161785556121ee565b828001600101855582156121ee579182015b828111156121ee5782358255916020019190600101906121d3565b506121fa929150612253565b5090565b8280548282559060005260206000209081019282156121ee579160200282015b828111156121ee57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061221e565b5b808211156121fa5760008155600101612254565b60008083601f840112612279578182fd5b5081356001600160401b0381111561228f578182fd5b6020830191508360208260051b85010111156122aa57600080fd5b9250929050565b80356001600160e01b0319811681146122c957600080fd5b919050565b60008083601f8401126122df578182fd5b5081356001600160401b038111156122f5578182fd5b6020830191508360208285010111156122aa57600080fd5b80356001600160401b03811681146122c957600080fd5b803568ffffffffffffffffff811681146122c957600080fd5b803560ff811681146122c957600080fd5b60006020828403121561235f578081fd5b8135611e1281612ade565b6000806040838503121561237c578081fd5b823561238781612ade565b9150602083013561239781612ade565b809150509250929050565b600080600080608085870312156123b7578182fd5b84356123c281612ade565b935060208501356123d281612ade565b925060408501356123e281612ade565b9396929550929360600135925050565b600080600060608486031215612406578283fd5b833561241181612ade565b925060208401359150604084013561242881612ade565b809150509250925092565b600080600080600060a0868803121561244a578081fd5b853561245581612ade565b945060208601359350604086013561246c81612ade565b925061247a606087016122b1565b9150612488608087016122b1565b90509295509295909350565b600080600080604085870312156124a9578384fd5b84356001600160401b03808211156124bf578586fd5b6124cb88838901612268565b909650945060208701359150808211156124e3578384fd5b506124f087828801612268565b95989497509550505050565b60006020828403121561250d578081fd5b5035919050565b60008060408385031215612526578182fd5b82359150602083013561239781612ade565b600060208284031215612549578081fd5b611e12826122b1565b60008060408385031215612564578182fd5b61256d8361230d565b915061257b6020840161233d565b90509250929050565b60008060408385031215612596578182fd5b61259f83612324565b946020939093013593505050565b6000806000606084860312156125c1578081fd5b61241184612324565b6000602082840312156125db578081fd5b611e128261233d565b600080600080606085870312156125f9578182fd5b6126028561233d565b93506020850135925060408501356001600160401b03811115612623578283fd5b6124f0878288016122ce565b600080600060608486031215612643578081fd5b61264c8461233d565b925061265a6020850161230d565b9150604084013590509250925092565b6000806000806080858703121561267f578182fd5b6126888561233d565b93506126966020860161230d565b93969395505050506040820135916060013590565b6000806000806000608086880312156126c2578283fd5b6126cb8661233d565b94506126d96020870161230d565b935060408601356001600160401b038111156126f3578384fd5b6126ff888289016122ce565b96999598509660600135949350505050565b6000815180845260208085019450808401835b838110156127495781516001600160a01b031687529582019590820190600101612724565b509495945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452612795816020860160208601612a04565b601f01601f19169290920160200192915050565b600581106127c757634e487b7160e01b600052602160045260246000fd5b9052565b6bffffffffffffffffffffffff198460601b168152818360148301376000910160140190815292915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612829816017850160208801612a04565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161285a816028840160208801612a04565b01602801949350505050565b848152602081018490526080810161288160408301856127a9565b82606083015295945050505050565b8381526040602082015260006128aa604083018486612754565b95945050505050565b86815260ff861660208201526001600160401b03851660408201526001600160a01b038416606082015260a0608082018190526000906128f69083018486612754565b98975050505050505050565b602081526000611e12602083018461277d565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020815281516020820152602082015160408201526000604083015160c0606084015261296f60e0840182612711565b90506060840151601f1984830301608085015261298c8282612711565b91505060808401516129a160a08501826127a9565b5060a084015160c08401528091505092915050565b600082198211156129c9576129c9612ac8565b500190565b60008160001904831182151516156129e8576129e8612ac8565b500290565b6000828210156129ff576129ff612ac8565b500390565b60005b83811015612a1f578181015183820152602001612a07565b83811115612a2e576000848401525b50505050565b600081612a4357612a43612ac8565b506000190190565b600181811c90821680612a5f57607f821691505b60208210811415612a8057634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612a9a57612a9a612ac8565b5060010190565b60006001600160401b0380831681811415612abe57612abe612ac8565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461160757600080fdfee2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4803c5a12f6bde629cea32e63d4b92d1b560816a6fb72e939d3c89e1cab650417a2646970667358221220206618f6e9d2996fdb0856a3118de2c6e9beeeb9b6d0473c36b666e64a44648664736f6c63430008040033e2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4",
  "deployedBytecode": "0x6080604052600436106102255760003560e01c806380ae1c2811610123578063a9cf69fa116100ab578063cdb0f73a1161006f578063cdb0f73a14610715578063d547741f14610735578063d7a9cd7914610755578063e8437ee71461076b578063ffaac0eb1461078b57600080fd5b8063a9cf69fa14610670578063beab71311461069d578063c5b37c22146106c9578063c5ec8970146106df578063cb10f215146106f557600080fd5b806391d14854116100f257806391d14854146105e3578063926d7d7f146106035780639d5773e0146106255780639d82dd631461063b578063a217fddf1461065b57600080fd5b806380ae1c281461054057806384db809f146105555780638c0c2631146105a357806391c404ac146105c357600080fd5b80634603ae38116101b15780635c975abb116101755780635c975abb146104915780635e1fab0f146104a9578063780cf004146104c95780637febe63f146104e9578063802aabe81461052a57600080fd5b80634603ae38146103805780634b0b919d146103a05780634e056005146103ee578063505987191461040e578063541d55481461047157600080fd5b8063248a9ca3116101f8578063248a9ca3146102b45780632f2ff15d146102f357806336568abe146103135780633ee7094a146103335780634454b20d1461036057600080fd5b806301ffc9a71461022a57806305e2ca171461025f57806317f03ce5146102745780631ff013f114610294575b600080fd5b34801561023657600080fd5b5061024a610245366004612538565b6107a0565b60405190151581526020015b60405180910390f35b61027261026d3660046125e4565b6107d7565b005b34801561028057600080fd5b5061027261028f36600461262f565b6109d4565b3480156102a057600080fd5b506102726102af36600461266a565b610b35565b3480156102c057600080fd5b506102e56102cf3660046124fc565b6000908152600160208190526040909120015490565b604051908152602001610256565b3480156102ff57600080fd5b5061027261030e366004612514565b6110a2565b34801561031f57600080fd5b5061027261032e366004612514565b6110ce565b34801561033f57600080fd5b5061035361034e366004612552565b61114c565b6040516102569190612902565b34801561036c57600080fd5b5061027261037b3660046126ab565b6111f1565b34801561038c57600080fd5b5061027261039b366004612494565b6114d4565b3480156103ac57600080fd5b506103d66103bb3660046125ca565b6008602052600090815260409020546001600160401b031681565b6040516001600160401b039091168152602001610256565b3480156103fa57600080fd5b506102726104093660046124fc565b611594565b34801561041a57600080fd5b50610461610429366004612584565b600b60209081526000928352604080842090915290825290208054600182015460048301546005909301549192909160ff9091169084565b6040516102569493929190612866565b34801561047d57600080fd5b5061024a61048c36600461234e565b6115cf565b34801561049d57600080fd5b5060005460ff1661024a565b3480156104b557600080fd5b506102726104c436600461234e565b6115e9565b3480156104d557600080fd5b506102726104e43660046123a2565b61160a565b3480156104f557600080fd5b5061024a6105043660046125ad565b600c60209081526000938452604080852082529284528284209052825290205460ff1681565b34801561053657600080fd5b506102e560045481565b34801561054c57600080fd5b50610272611686565b34801561056157600080fd5b5061058b6105703660046124fc565b6009602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610256565b3480156105af57600080fd5b506102726105be36600461236a565b611698565b3480156105cf57600080fd5b506102726105de3660046124fc565b611703565b3480156105ef57600080fd5b5061024a6105fe366004612514565b611762565b34801561060f57600080fd5b506102e5600080516020612af483398151915281565b34801561063157600080fd5b506102e560055481565b34801561064757600080fd5b5061027261065636600461234e565b61178d565b34801561066757600080fd5b506102e5600081565b34801561067c57600080fd5b5061069061068b36600461262f565b61185d565b604051610256919061293f565b3480156106a957600080fd5b506002546106b79060ff1681565b60405160ff9091168152602001610256565b3480156106d557600080fd5b506102e560065481565b3480156106eb57600080fd5b506102e560075481565b34801561070157600080fd5b506102726107103660046123f2565b6119ef565b34801561072157600080fd5b5061027261073036600461234e565b611a83565b34801561074157600080fd5b50610272610750366004612514565b611b4c565b34801561076157600080fd5b506102e560035481565b34801561077757600080fd5b50610272610786366004612433565b611b73565b34801561079757600080fd5b50610272611c21565b60006001600160e01b03198216637965db0b60e01b14806107d157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60005460ff16156108035760405162461bcd60e51b81526004016107fa90612915565b60405180910390fd5b600654341461084d5760405162461bcd60e51b8152602060048201526016602482015275125b98dbdc9c9958dd08199959481cdd5c1c1b1a595960521b60448201526064016107fa565b6000838152600960205260409020546001600160a01b0316806108b25760405162461bcd60e51b815260206004820181905260248201527f7265736f757263654944206e6f74206d617070656420746f2068616e646c657260448201526064016107fa565b60ff85166000908152600860205260408120805482906108da906001600160401b0316612aa1565b82546001600160401b038083166101009490940a848102910219909116179092556000908152600a6020908152604080832060ff8b168452909152902090915061092590858561217a565b506040516338995da960e01b815282906001600160a01b038216906338995da99061095e9089908b90879033908c908c906004016128b3565b600060405180830381600087803b15801561097857600080fd5b505af115801561098c573d6000803e3d6000fd5b50505050816001600160401b0316868860ff167fdbb69440df8433824a026ef190652f29929eb64b4d1d5d2a69be8afe3e6eaed860405160405180910390a450505050505050565b6109dc611e19565b68ffffffffffffffff00600883901b1660ff8416176000818152600b6020908152604080832085845290915290206004808083015460ff1690811115610a3257634e487b7160e01b600052602160045260246000fd5b1415610a805760405162461bcd60e51b815260206004820152601a60248201527f50726f706f73616c20616c72656164792063616e63656c6c656400000000000060448201526064016107fa565b6007546005820154610a93904390611e8e565b11610ae05760405162461bcd60e51b815260206004820181905260248201527f50726f706f73616c206e6f7420617420657870697279207468726573686f6c6460448201526064016107fa565b6004818101805460ff191682179055815460018301546040805192835260208301919091526001600160401b0387169160ff891691600080516020612b14833981519152910160405180910390a45050505050565b610b3d611e9a565b60005460ff1615610b605760405162461bcd60e51b81526004016107fa90612915565b68ffffffffffffffff00600884901b1660ff8516176000818152600b6020908152604080832085845282528083208684526009909252909120546001600160a01b0316610bef5760405162461bcd60e51b815260206004820152601960248201527f6e6f2068616e646c657220666f72207265736f7572636549440000000000000060448201526064016107fa565b60048082015460019160ff90911690811115610c1b57634e487b7160e01b600052602160045260246000fd5b1115610c7c5760405162461bcd60e51b815260206004820152602a60248201527f70726f706f73616c20616c7265616479207061737365642f65786563757465646044820152690bd8d85b98d95b1b195960b21b60648201526084016107fa565b68ffffffffffffffffff82166000908152600c60209081526040808320868452825280832033845290915290205460ff1615610cf25760405162461bcd60e51b81526020600482015260156024820152741c995b185e595c88185b1c9958591e481d9bdd1959605a1b60448201526064016107fa565b60048082015460ff1690811115610d1957634e487b7160e01b600052602160045260246000fd5b610ec557600560008154610d2c90612a86565b909155506040805160c0810182528581526020810185905281516001808252818401845291928301918160200160208202803683375050508152604080516000808252602080830184528085019290925260018385018190524360609095019490945268ffffffffffffffffff87168152600b82528281208882528252829020845181558482015193810193909355908301518051610dd192600285019201906121fe565b5060608201518051610ded9160038401916020909101906121fe565b5060808201518160040160006101000a81548160ff02191690836004811115610e2657634e487b7160e01b600052602160045260246000fd5b021790555060a082015181600501559050503381600201600081548110610e5d57634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905560015b60408051868152602081018690526001600160401b0388169160ff8a1691600080516020612b14833981519152910160405180910390a4610f61565b6007546005820154610ed8904390611e8e565b1115610ef2576004818101805460ff191682179055610e89565b80600101548314610f395760405162461bcd60e51b81526020600482015260116024820152700c8c2e8c2d0c2e6d040dad2e6dac2e8c6d607b1b60448201526064016107fa565b600281018054600181018255600091825260209091200180546001600160a01b031916331790555b60048181015460ff1681811115610f8857634e487b7160e01b600052602160045260246000fd5b1461109a5768ffffffffffffffffff82166000908152600c6020908152604080832086845282528083203384529091529020805460ff1916600117905560048082015460ff1690811115610fec57634e487b7160e01b600052602160045260246000fd5b856001600160401b03168760ff167f25f8daaa4635a7729927ba3f5b3d59cc3320aca7c32c9db4e7ca7b95743436408760405161102b91815260200190565b60405180910390a4600160035411158061104b5750600354600282015410155b1561109a5760048101805460ff1916600290811790915560408051868152602081018690526001600160401b0388169160ff8a1691600080516020612b14833981519152910160405180910390a45b505050505050565b600082815260016020819052604090912001546110bf8133611efe565b6110c98383611f62565b505050565b6001600160a01b038116331461113e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107fa565b6111488282611fcd565b5050565b600a6020908152600092835260408084209091529082529020805461117090612a4b565b80601f016020809104026020016040519081016040528092919081815260200182805461119c90612a4b565b80156111e95780601f106111be576101008083540402835291602001916111e9565b820191906000526020600020905b8154815290600101906020018083116111cc57829003601f168201915b505050505081565b6111f9611e9a565b60005460ff161561121c5760405162461bcd60e51b81526004016107fa90612915565b60008181526009602090815260408083205490516001600160a01b039091169268ffffffffffffffff00600889901b1660ff8a161792909161126491859189918991016127cb565b60408051601f19818403018152918152815160209283012068ffffffffffffffffff85166000908152600b84528281208282529093529082209092509060048083015460ff16908111156112c857634e487b7160e01b600052602160045260246000fd5b141561130f5760405162461bcd60e51b815260206004820152601660248201527570726f706f73616c206973206e6f742061637469766560501b60448201526064016107fa565b600260048083015460ff169081111561133857634e487b7160e01b600052602160045260246000fd5b146113855760405162461bcd60e51b815260206004820152601c60248201527f70726f706f73616c20616c7265616479207472616e736665727265640000000060448201526064016107fa565b806001015482146113d85760405162461bcd60e51b815260206004820152601b60248201527f6461746120646f65736e2774206d61746368206461746168617368000000000060448201526064016107fa565b6004818101805460ff1916600317905581546000818152600960205260409081902054905163712467f960e11b81526001600160a01b0390911692839263e248cff292611429928d918d9101612890565b600060405180830381600087803b15801561144357600080fd5b505af1158015611457573d6000803e3d6000fd5b50505060048084015460ff16915081111561148257634e487b7160e01b600052602160045260246000fd5b896001600160401b03168b60ff16600080516020612b14833981519152856000015486600101546040516114c0929190918252602082015260400190565b60405180910390a450505050505050505050565b6114dc612034565b60005b8381101561158d5784848281811061150757634e487b7160e01b600052603260045260246000fd5b905060200201602081019061151c919061234e565b6001600160a01b03166108fc84848481811061154857634e487b7160e01b600052603260045260246000fd5b905060200201359081150290604051600060405180830381858888f1935050505015801561157a573d6000803e3d6000fd5b508061158581612a86565b9150506114df565b5050505050565b61159c612034565b600381905560405181907fa20d6b84cd798a24038be305eff8a45ca82ef54a2aa2082005d8e14c0a4746c890600090a250565b60006107d1600080516020612af483398151915283611762565b6115f1612034565b6115fc6000826110a2565b6116076000336110ce565b50565b611612612034565b604051636ce5768960e11b81526001600160a01b03848116600483015283811660248301526044820183905285919082169063d9caed1290606401600060405180830381600087803b15801561166757600080fd5b505af115801561167b573d6000803e3d6000fd5b505050505050505050565b61168e612034565b61169661208b565b565b6116a0612034565b6040516307b7ed9960e01b81526001600160a01b0382811660048301528391908216906307b7ed9990602401600060405180830381600087803b1580156116e657600080fd5b505af11580156116fa573d6000803e3d6000fd5b50505050505050565b61170b612034565b80600654141561175d5760405162461bcd60e51b815260206004820152601f60248201527f43757272656e742066656520697320657175616c20746f206e6577206665650060448201526064016107fa565b600655565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b611795612034565b6117ad600080516020612af483398151915282611762565b6117f95760405162461bcd60e51b815260206004820152601f60248201527f6164647220646f65736e277420686176652072656c6179657220726f6c65210060448201526064016107fa565b611811600080516020612af483398151915282611b4c565b6040516001600160a01b038216907f10e1f7ce9fd7d1b90a66d13a2ab3cb8dd7f29f3f8d520b143b063ccfbab6906b90600090a26004805490600061185583612a34565b919050555050565b6040805160c08082018352600080835260208084018290526060848601819052808501526080840182905260a0840182905260ff8816600888901b68ffffffffffffffff001617808352600b82528583208784528252918590208551938401865280548452600181015484830152600281018054875181850281018501895281815296979496929486019383018282801561192157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611903575b505050505081526020016003820180548060200260200160405190810160405280929190818152602001828054801561198357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611965575b505050918352505060048281015460209092019160ff16908111156119b857634e487b7160e01b600052602160045260246000fd5b60048111156119d757634e487b7160e01b600052602160045260246000fd5b81526020016005820154815250509150509392505050565b6119f7612034565b6000828152600960205260409081902080546001600160a01b0319166001600160a01b038681169182179092559151635c7d1b9b60e11b815260048101859052908316602482015284919063b8fa373690604401600060405180830381600087803b158015611a6557600080fd5b505af1158015611a79573d6000803e3d6000fd5b5050505050505050565b611a8b612034565b611aa3600080516020612af483398151915282611762565b15611af05760405162461bcd60e51b815260206004820152601e60248201527f6164647220616c7265616479206861732072656c6179657220726f6c6521000060448201526064016107fa565b611b08600080516020612af4833981519152826110a2565b6040516001600160a01b038216907f03580ee9f53a62b7cb409a2cb56f9be87747dd15017afc5cef6eef321e4fb2c590600090a26004805490600061185583612a86565b60008281526001602081905260409091200154611b698133611efe565b6110c98383611fcd565b611b7b612034565b6000848152600960205260409081902080546001600160a01b0319166001600160a01b038881169182179092559151635dd40c2d60e11b81526004810187905290851660248201526001600160e01b031980851660448301528316606482015286919063bba8185a90608401600060405180830381600087803b158015611c0157600080fd5b505af1158015611c15573d6000803e3d6000fd5b50505050505050505050565b611c29612034565b611696612100565b60606000611c408360026129ce565b611c4b9060026129b6565b6001600160401b03811115611c7057634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611c9a576020820181803683370190505b509050600360fc1b81600081518110611cc357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611d0057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611d248460026129ce565b611d2f9060016129b6565b90505b6001811115611dc3576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611d7157634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611d9557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611dbc81612a34565b9050611d32565b508315611e125760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107fa565b9392505050565b611e24600033611762565b80611e425750611e42600080516020612af483398151915233611762565b6116965760405162461bcd60e51b815260206004820152601e60248201527f73656e646572206973206e6f742072656c61796572206f722061646d696e000060448201526064016107fa565b6000611e1282846129ed565b611eb2600080516020612af483398151915233611762565b6116965760405162461bcd60e51b815260206004820181905260248201527f73656e64657220646f65736e277420686176652072656c6179657220726f6c6560448201526064016107fa565b611f088282611762565b61114857611f20816001600160a01b03166014611c31565b611f2b836020611c31565b604051602001611f3c9291906127f7565b60408051601f198184030181529082905262461bcd60e51b82526107fa91600401612902565b611f6c8282611762565b6111485760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b611fd78282611762565b156111485760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61203f600033611762565b6116965760405162461bcd60e51b815260206004820152601e60248201527f73656e64657220646f65736e277420686176652061646d696e20726f6c65000060448201526064016107fa565b60005460ff16156120ae5760405162461bcd60e51b81526004016107fa90612915565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120e33390565b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff166121495760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107fa565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336120e3565b82805461218690612a4b565b90600052602060002090601f0160209004810192826121a857600085556121ee565b82601f106121c15782800160ff198235161785556121ee565b828001600101855582156121ee579182015b828111156121ee5782358255916020019190600101906121d3565b506121fa929150612253565b5090565b8280548282559060005260206000209081019282156121ee579160200282015b828111156121ee57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061221e565b5b808211156121fa5760008155600101612254565b60008083601f840112612279578182fd5b5081356001600160401b0381111561228f578182fd5b6020830191508360208260051b85010111156122aa57600080fd5b9250929050565b80356001600160e01b0319811681146122c957600080fd5b919050565b60008083601f8401126122df578182fd5b5081356001600160401b038111156122f5578182fd5b6020830191508360208285010111156122aa57600080fd5b80356001600160401b03811681146122c957600080fd5b803568ffffffffffffffffff811681146122c957600080fd5b803560ff811681146122c957600080fd5b60006020828403121561235f578081fd5b8135611e1281612ade565b6000806040838503121561237c578081fd5b823561238781612ade565b9150602083013561239781612ade565b809150509250929050565b600080600080608085870312156123b7578182fd5b84356123c281612ade565b935060208501356123d281612ade565b925060408501356123e281612ade565b9396929550929360600135925050565b600080600060608486031215612406578283fd5b833561241181612ade565b925060208401359150604084013561242881612ade565b809150509250925092565b600080600080600060a0868803121561244a578081fd5b853561245581612ade565b945060208601359350604086013561246c81612ade565b925061247a606087016122b1565b9150612488608087016122b1565b90509295509295909350565b600080600080604085870312156124a9578384fd5b84356001600160401b03808211156124bf578586fd5b6124cb88838901612268565b909650945060208701359150808211156124e3578384fd5b506124f087828801612268565b95989497509550505050565b60006020828403121561250d578081fd5b5035919050565b60008060408385031215612526578182fd5b82359150602083013561239781612ade565b600060208284031215612549578081fd5b611e12826122b1565b60008060408385031215612564578182fd5b61256d8361230d565b915061257b6020840161233d565b90509250929050565b60008060408385031215612596578182fd5b61259f83612324565b946020939093013593505050565b6000806000606084860312156125c1578081fd5b61241184612324565b6000602082840312156125db578081fd5b611e128261233d565b600080600080606085870312156125f9578182fd5b6126028561233d565b93506020850135925060408501356001600160401b03811115612623578283fd5b6124f0878288016122ce565b600080600060608486031215612643578081fd5b61264c8461233d565b925061265a6020850161230d565b9150604084013590509250925092565b6000806000806080858703121561267f578182fd5b6126888561233d565b93506126966020860161230d565b93969395505050506040820135916060013590565b6000806000806000608086880312156126c2578283fd5b6126cb8661233d565b94506126d96020870161230d565b935060408601356001600160401b038111156126f3578384fd5b6126ff888289016122ce565b96999598509660600135949350505050565b6000815180845260208085019450808401835b838110156127495781516001600160a01b031687529582019590820190600101612724565b509495945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452612795816020860160208601612a04565b601f01601f19169290920160200192915050565b600581106127c757634e487b7160e01b600052602160045260246000fd5b9052565b6bffffffffffffffffffffffff198460601b168152818360148301376000910160140190815292915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612829816017850160208801612a04565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161285a816028840160208801612a04565b01602801949350505050565b848152602081018490526080810161288160408301856127a9565b82606083015295945050505050565b8381526040602082015260006128aa604083018486612754565b95945050505050565b86815260ff861660208201526001600160401b03851660408201526001600160a01b038416606082015260a0608082018190526000906128f69083018486612754565b98975050505050505050565b602081526000611e12602083018461277d565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020815281516020820152602082015160408201526000604083015160c0606084015261296f60e0840182612711565b90506060840151601f1984830301608085015261298c8282612711565b91505060808401516129a160a08501826127a9565b5060a084015160c08401528091505092915050565b600082198211156129c9576129c9612ac8565b500190565b60008160001904831182151516156129e8576129e8612ac8565b500290565b6000828210156129ff576129ff612ac8565b500390565b60005b83811015612a1f578181015183820152602001612a07565b83811115612a2e576000848401525b50505050565b600081612a4357612a43612ac8565b506000190190565b600181811c90821680612a5f57607f821691505b60208210811415612a8057634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612a9a57612a9a612ac8565b5060010190565b60006001600160401b0380831681811415612abe57612abe612ac8565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461160757600080fdfee2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4803c5a12f6bde629cea32e63d4b92d1b560816a6fb72e939d3c89e1cab650417a2646970667358221220206618f6e9d2996fdb0856a3118de2c6e9beeeb9b6d0473c36b666e64a44648664736f6c63430008040033",
  "devdoc": {
    "author": "ChainSafe Systems.",
    "details": "Copied directly from here: https://github.com/ChainSafe/chainbridge-solidity/releases/tag/v1.0.0 except for  one small change to the imported Pausable and SafeMath contracts. We replaced local implementations with  openzeppelin/contracts versions.",
    "kind": "dev",
    "methods": {
      "adminAddRelayer(address)": {
        "params": {
          "relayerAddress": "Address of relayer to be added."
        }
      },
      "adminChangeFee(uint256)": {
        "params": {
          "newFee": "Value {_fee} will be updated to."
        }
      },
      "adminChangeRelayerThreshold(uint256)": {
        "params": {
          "newThreshold": "Value {_relayerThreshold} will be changed to."
        }
      },
      "adminRemoveRelayer(address)": {
        "params": {
          "relayerAddress": "Address of relayer to be removed."
        }
      },
      "adminSetBurnable(address,address)": {
        "params": {
          "handlerAddress": "Address of handler resource will be set for.",
          "tokenAddress": "Address of contract to be called when a deposit is made and a deposited is executed."
        }
      },
      "adminSetGenericResource(address,bytes32,address,bytes4,bytes4)": {
        "params": {
          "contractAddress": "Address of contract to be called when a deposit is made and a deposited is executed.",
          "handlerAddress": "Address of handler resource will be set for.",
          "resourceID": "ResourceID to be used when making deposits."
        }
      },
      "adminSetResource(address,bytes32,address)": {
        "params": {
          "handlerAddress": "Address of handler resource will be set for.",
          "resourceID": "ResourceID to be used when making deposits.",
          "tokenAddress": "Address of contract to be called when a deposit is made and a deposited is executed."
        }
      },
      "adminWithdraw(address,address,address,uint256)": {
        "params": {
          "amountOrTokenID": "Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.",
          "handlerAddress": "Address of handler to withdraw from.",
          "recipient": "Address to withdraw tokens to.",
          "tokenAddress": "Address of token to withdraw."
        }
      },
      "cancelProposal(uint8,uint64,bytes32)": {
        "params": {
          "chainID": "ID of chain deposit originated from.",
          "dataHash": "Hash of data originally provided when deposit was made.",
          "depositNonce": "ID of deposited generated by origin Bridge contract."
        }
      },
      "constructor": {
        "params": {
          "chainID": "ID of chain the Bridge contract exists on.",
          "initialRelayerThreshold": "Number of votes needed for a deposit proposal to be considered passed.",
          "initialRelayers": "Addresses that should be initially granted the relayer role."
        }
      },
      "deposit(uint8,bytes32,bytes)": {
        "params": {
          "data": "Additional data to be passed to specified handler.",
          "destinationChainID": "ID of chain deposit will be bridged to.",
          "resourceID": "ResourceID used to find address of handler to be used for deposit."
        }
      },
      "executeProposal(uint8,uint64,bytes,bytes32)": {
        "params": {
          "chainID": "ID of chain deposit originated from.",
          "data": "Data originally provided when deposit was made.",
          "depositNonce": "ID of deposited generated by origin Bridge contract.",
          "resourceID": "ResourceID to be used when making deposits."
        }
      },
      "getProposal(uint8,uint64,bytes32)": {
        "params": {
          "dataHash": "Hash of data to be provided when deposit proposal is executed.",
          "depositNonce": "ID of proposal generated by proposal's origin Bridge contract.",
          "originChainID": "Chain ID deposit originated from."
        },
        "returns": {
          "_0": "Proposal which consists of: - _dataHash Hash of data to be provided when deposit proposal is executed. - _yesVotes Number of votes in favor of proposal. - _noVotes Number of votes against proposal. - _status Current status of proposal."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isRelayer(address)": {
        "params": {
          "relayer": "Address to check."
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceAdmin(address)": {
        "params": {
          "newAdmin": "Address that admin role will be granted to."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferFunds(address[],uint256[])": {
        "params": {
          "addrs": "Array of addresses to transfer {amounts} to.",
          "amounts": "Array of amonuts to transfer to {addrs}."
        }
      },
      "voteProposal(uint8,uint64,bytes32,bytes32)": {
        "params": {
          "chainID": "ID of chain deposit originated from.",
          "dataHash": "Hash of data provided when deposit was made.",
          "depositNonce": "ID of deposited generated by origin Bridge contract."
        }
      }
    },
    "title": "Facilitates deposits, creation and votiing of deposit proposals, and deposit executions.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "adminAddRelayer(address)": {
        "notice": "Grants {relayerAddress} the relayer role and increases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerAdded} event."
      },
      "adminChangeFee(uint256)": {
        "notice": "Changes deposit fee.Only callable by admin."
      },
      "adminChangeRelayerThreshold(uint256)": {
        "notice": "Modifies the number of votes required for a proposal to be considered passed.Only callable by an address that currently has the admin role.Emits {RelayerThresholdChanged} event."
      },
      "adminPauseTransfers()": {
        "notice": "Pauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role."
      },
      "adminRemoveRelayer(address)": {
        "notice": "Removes relayer role for {relayerAddress} and decreases {_totalRelayer} count.Only callable by an address that currently has the admin role.Emits {RelayerRemoved} event."
      },
      "adminSetBurnable(address,address)": {
        "notice": "Sets a resource as burnable for handler contracts that use the IERCHandler interface.Only callable by an address that currently has the admin role."
      },
      "adminSetGenericResource(address,bytes32,address,bytes4,bytes4)": {
        "notice": "Sets a new resource for handler contracts that use the IGenericHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role."
      },
      "adminSetResource(address,bytes32,address)": {
        "notice": "Sets a new resource for handler contracts that use the IERCHandler interface, and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.Only callable by an address that currently has the admin role."
      },
      "adminUnpauseTransfers()": {
        "notice": "Unpauses deposits, proposal creation and voting, and deposit executions.Only callable by an address that currently has the admin role."
      },
      "adminWithdraw(address,address,address,uint256)": {
        "notice": "Used to manually withdraw funds from ERC safes."
      },
      "cancelProposal(uint8,uint64,bytes32)": {
        "notice": "Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must be past expiry threshold.Emits {ProposalEvent} event with status {Cancelled}."
      },
      "constructor": {
        "notice": "Initializes Bridge, creates and grants {msg.sender} the admin role, creates and grants {initialRelayers} the relayer role."
      },
      "deposit(uint8,bytes32,bytes)": {
        "notice": "Initiates a transfer using a specified handler contract.Only callable when Bridge is not paused.Emits {Deposit} event."
      },
      "executeProposal(uint8,uint64,bytes,bytes32)": {
        "notice": "Executes a deposit proposal that is considered passed using a specified handler contract.Only callable by relayers when Bridge is not paused.Proposal must have Passed status.Hash of {data} must equal proposal's {dataHash}.Emits {ProposalEvent} event with status {Executed}."
      },
      "getProposal(uint8,uint64,bytes32)": {
        "notice": "Returns a proposal."
      },
      "isRelayer(address)": {
        "notice": "Returns true if {relayer} has the relayer role."
      },
      "renounceAdmin(address)": {
        "notice": "Removes admin role from {msg.sender} and grants it to {newAdmin}.Only callable by an address that currently has the admin role."
      },
      "transferFunds(address[],uint256[])": {
        "notice": "Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1. This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0."
      },
      "voteProposal(uint8,uint64,bytes32,bytes32)": {
        "notice": "When called, {msg.sender} will be marked as voting in favor of proposal.Only callable by relayers when Bridge is not paused.Proposal must not have already been passed or executed.{msg.sender} must not have already voted on proposal.Emits {ProposalEvent} event with status indicating the proposal status.Emits {ProposalVote} event."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 495,
        "contract": "contracts/chainbridge/Bridge.sol:Bridge",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 62,
        "contract": "contracts/chainbridge/Bridge.sol:Bridge",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)57_storage)"
      },
      {
        "astId": 5890,
        "contract": "contracts/chainbridge/Bridge.sol:Bridge",
        "label": "_chainID",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 5892,
        "contract": "contracts/chainbridge/Bridge.sol:Bridge",
        "label": "_relayerThreshold",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5894,
        "contract": "contracts/chainbridge/Bridge.sol:Bridge",
        "label": "_totalRelayers",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5896,
        "contract": "contracts/chainbridge/Bridge.sol:Bridge",
        "label": "_totalProposals",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5898,
        "contract": "contracts/chainbridge/Bridge.sol:Bridge",
        "label": "_fee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5900,
        "contract": "contracts/chainbridge/Bridge.sol:Bridge",
        "label": "_expiry",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5929,
        "contract": "contracts/chainbridge/Bridge.sol:Bridge",
        "label": "_depositCounts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint8,t_uint64)"
      },
      {
        "astId": 5933,
        "contract": "contracts/chainbridge/Bridge.sol:Bridge",
        "label": "_resourceIDToHandlerAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 5939,
        "contract": "contracts/chainbridge/Bridge.sol:Bridge",
        "label": "_depositRecords",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))"
      },
      {
        "astId": 5946,
        "contract": "contracts/chainbridge/Bridge.sol:Bridge",
        "label": "_proposals",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)5925_storage))"
      },
      {
        "astId": 5954,
        "contract": "contracts/chainbridge/Bridge.sol:Bridge",
        "label": "_hasVotedOnProposal",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint72,t_mapping(t_bytes32,t_mapping(t_address,t_bool)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(ProposalStatus)5909": {
        "encoding": "inplace",
        "label": "enum Bridge.ProposalStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_struct(Proposal)5925_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Bridge.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)5925_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)57_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)57_storage"
      },
      "t_mapping(t_uint64,t_mapping(t_uint8,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(uint8 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_bytes_storage)"
      },
      "t_mapping(t_uint72,t_mapping(t_bytes32,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_uint72",
        "label": "mapping(uint72 => mapping(bytes32 => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_uint72,t_mapping(t_bytes32,t_struct(Proposal)5925_storage))": {
        "encoding": "mapping",
        "key": "t_uint72",
        "label": "mapping(uint72 => mapping(bytes32 => struct Bridge.Proposal))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(Proposal)5925_storage)"
      },
      "t_mapping(t_uint8,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint8,t_uint64)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_struct(Proposal)5925_storage": {
        "encoding": "inplace",
        "label": "struct Bridge.Proposal",
        "members": [
          {
            "astId": 5911,
            "contract": "contracts/chainbridge/Bridge.sol:Bridge",
            "label": "_resourceID",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5913,
            "contract": "contracts/chainbridge/Bridge.sol:Bridge",
            "label": "_dataHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 5916,
            "contract": "contracts/chainbridge/Bridge.sol:Bridge",
            "label": "_yesVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5919,
            "contract": "contracts/chainbridge/Bridge.sol:Bridge",
            "label": "_noVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 5922,
            "contract": "contracts/chainbridge/Bridge.sol:Bridge",
            "label": "_status",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(ProposalStatus)5909"
          },
          {
            "astId": 5924,
            "contract": "contracts/chainbridge/Bridge.sol:Bridge",
            "label": "_proposedBlock",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(RoleData)57_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 54,
            "contract": "contracts/chainbridge/Bridge.sol:Bridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 56,
            "contract": "contracts/chainbridge/Bridge.sol:Bridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint72": {
        "encoding": "inplace",
        "label": "uint72",
        "numberOfBytes": "9"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}