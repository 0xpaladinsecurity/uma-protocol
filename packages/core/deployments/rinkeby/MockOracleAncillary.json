{
  "address": "0x38A3780A13528d2ea0CB666b95feEc1b32450908",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_finderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "PriceRequestAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pusher",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        }
      ],
      "name": "PushedPrice",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingQueries",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            }
          ],
          "internalType": "struct MockOracleAncillary.QueryPoint[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "hasPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        }
      ],
      "name": "pushPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "requestPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "setCurrentTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x57490793203085dad8807ed5102e020f74e49141d23da34b953bb3cb6c64d970",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0x38A3780A13528d2ea0CB666b95feEc1b32450908",
    "transactionIndex": 17,
    "gasUsed": "972965",
    "logsBloom": "0x
    "blockHash": "0x45749a06376aecd6aefe0fe2f0bb0cdc8dfdf4bf922b46ef34a8319d45522245",
    "transactionHash": "0x57490793203085dad8807ed5102e020f74e49141d23da34b953bb3cb6c64d970",
    "logs": [],
    "blockNumber": 8544392,
    "cumulativeGasUsed": "1645354",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2b1512553243FbfEaAa9BF613bACEd2231C9ae00",
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "87af3bddb96fa5cfcfc99d0e6fd39498",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_finderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"PriceRequestAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pusher\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"PushedPrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingQueries\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"internalType\":\"struct MockOracleAncillary.QueryPoint[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"hasPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"}],\"name\":\"pushPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"requestPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setCurrentTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getCurrentTime()\":{\"returns\":{\"_0\":\"uint for the current Testable timestamp.\"}},\"getPrice(bytes32,uint256,bytes)\":{\"details\":\"If the price is not available, the method reverts.\",\"params\":{\"ancillaryData\":\"arbitrary data appended to a price request to give the voters more info from the caller.\",\"identifier\":\"uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\",\"time\":\"unix timestamp for the price request.\"},\"returns\":{\"_0\":\"int256 representing the resolved price for the given identifier and timestamp.\"}},\"hasPrice(bytes32,uint256,bytes)\":{\"details\":\"Time must be in the past and the identifier must be supported.\",\"params\":{\"ancillaryData\":\"arbitrary data appended to a price request to give the voters more info from the caller.\",\"identifier\":\"uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\",\"time\":\"unix timestamp for the price request.\"},\"returns\":{\"_0\":\"bool if the DVM has resolved to a price for the given identifier and timestamp.\"}},\"requestPrice(bytes32,uint256,bytes)\":{\"details\":\"Time must be in the past and the identifier must be supported.\",\"params\":{\"ancillaryData\":\"arbitrary data appended to a price request to give the voters more info from the caller.\",\"identifier\":\"uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\",\"time\":\"unix timestamp for the price request.\"}},\"setCurrentTime(uint256)\":{\"details\":\"Will revert if not running in test mode.\",\"params\":{\"time\":\"timestamp to set current Testable time to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCurrentTime()\":{\"notice\":\"Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.\"},\"getPrice(bytes32,uint256,bytes)\":{\"notice\":\"Gets the price for `identifier` and `time` if it has already been requested and resolved.\"},\"hasPrice(bytes32,uint256,bytes)\":{\"notice\":\"Whether the price for `identifier` and `time` is available.\"},\"requestPrice(bytes32,uint256,bytes)\":{\"notice\":\"Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\"},\"setCurrentTime(uint256)\":{\"notice\":\"Sets the current time.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/test/MockOracleAncillary.sol\":\"MockOracleAncillary\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":199},\"remappings\":[]},\"sources\":{\"contracts/common/implementation/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Timer.sol\\\";\\n\\n/**\\n * @title Base class that provides time overrides, but only if being run in test mode.\\n */\\nabstract contract Testable {\\n    // If the contract is being run on the test network, then `timerAddress` will be the 0x0 address.\\n    // Note: this variable should be set on construction and never modified.\\n    address public timerAddress;\\n\\n    /**\\n     * @notice Constructs the Testable contract. Called by child contracts.\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\n     * Must be set to 0x0 for production environments that use live time.\\n     */\\n    constructor(address _timerAddress) {\\n        timerAddress = _timerAddress;\\n    }\\n\\n    /**\\n     * @notice Reverts if not running in test mode.\\n     */\\n    modifier onlyIfTest {\\n        require(timerAddress != address(0x0));\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the current time.\\n     * @dev Will revert if not running in test mode.\\n     * @param time timestamp to set current Testable time to.\\n     */\\n    function setCurrentTime(uint256 time) external onlyIfTest {\\n        Timer(timerAddress).setCurrentTime(time);\\n    }\\n\\n    /**\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\n     * Otherwise, it will return the block timestamp.\\n     * @return uint for the current Testable timestamp.\\n     */\\n    function getCurrentTime() public view returns (uint256) {\\n        if (timerAddress != address(0x0)) {\\n            return Timer(timerAddress).getCurrentTime();\\n        } else {\\n            return block.timestamp; // solhint-disable-line not-rely-on-time\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4d7a20dbed2393de98a3995830efe284e8a491363ade605c553e7f6db7acf11e\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Timer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Universal store of current contract time for testing environments.\\n */\\ncontract Timer {\\n    uint256 private currentTime;\\n\\n    constructor() {\\n        currentTime = block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /**\\n     * @notice Sets the current time.\\n     * @dev Will revert if not running in test mode.\\n     * @param time timestamp to set `currentTime` to.\\n     */\\n    function setCurrentTime(uint256 time) external {\\n        currentTime = time;\\n    }\\n\\n    /**\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\n     * Otherwise, it will return the block timestamp.\\n     * @return uint256 for the current Testable timestamp.\\n     */\\n    function getCurrentTime() public view returns (uint256) {\\n        return currentTime;\\n    }\\n}\\n\",\"keccak256\":\"0x3ce8e6a8e741d7a6e2a18be49ab33a805f163336abbb0d05bee9c2f54a9fbfc5\",\"license\":\"AGPL-3.0-only\"},\"contracts/oracle/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\n */\\nlibrary OracleInterfaces {\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\n    bytes32 public constant Store = \\\"Store\\\";\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\n    bytes32 public constant Registry = \\\"Registry\\\";\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\n}\\n\",\"keccak256\":\"0x5d1abdfd3904f6b26addd5b5dbaf8d68591cbb8ec461d566c081d2a6d931c8d3\",\"license\":\"AGPL-3.0-only\"},\"contracts/oracle/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples are the Oracle or Store interfaces.\\n */\\ninterface FinderInterface {\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\n}\\n\",\"keccak256\":\"0x9166fbfe08e954eb86d33c114fcde7ce4fd0dda5d9d28b31210582bfc769fa86\",\"license\":\"AGPL-3.0-only\"},\"contracts/oracle/interfaces/IdentifierWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\npragma abicoder v2;\\n\\n/**\\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\\n */\\ninterface IdentifierWhitelistInterface {\\n    /**\\n     * @notice Adds the provided identifier as a supported identifier.\\n     * @dev Price requests using this identifier will succeed after this call.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     */\\n    function addSupportedIdentifier(bytes32 identifier) external;\\n\\n    /**\\n     * @notice Removes the identifier from the whitelist.\\n     * @dev Price requests using this identifier will no longer succeed after this call.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     */\\n    function removeSupportedIdentifier(bytes32 identifier) external;\\n\\n    /**\\n     * @notice Checks whether an identifier is on the whitelist.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     * @return bool if the identifier is supported (or not).\\n     */\\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa862c6807cb63a88b2f30f6238a69122d9b143747322647dec2a730f14b8283b\",\"license\":\"AGPL-3.0-only\"},\"contracts/oracle/interfaces/OracleAncillaryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OracleAncillaryInterface {\\n    /**\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\n     * @dev Time must be in the past and the identifier must be supported.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\n     * @param time unix timestamp for the price request.\\n     */\\n\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    ) public virtual;\\n\\n    /**\\n     * @notice Whether the price for `identifier` and `time` is available.\\n     * @dev Time must be in the past and the identifier must be supported.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param time unix timestamp for the price request.\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\n     */\\n    function hasPrice(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (bool);\\n\\n    /**\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\n     * @dev If the price is not available, the method reverts.\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\n     * @param time unix timestamp for the price request.\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\n     */\\n\\n    function getPrice(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (int256);\\n}\\n\",\"keccak256\":\"0xd58b41fe1e389f7871db7c04f2c05c1aac1d0455bbc521534da81fd657016a1f\",\"license\":\"AGPL-3.0-only\"},\"contracts/oracle/test/MockOracleAncillary.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\npragma abicoder v2;\\n\\nimport \\\"../../common/implementation/Testable.sol\\\";\\nimport \\\"../interfaces/OracleAncillaryInterface.sol\\\";\\nimport \\\"../interfaces/IdentifierWhitelistInterface.sol\\\";\\nimport \\\"../interfaces/FinderInterface.sol\\\";\\nimport \\\"../implementation/Constants.sol\\\";\\n\\n// A mock oracle used for testing.\\ncontract MockOracleAncillary is OracleAncillaryInterface, Testable {\\n    // Represents an available price. Have to keep a separate bool to allow for price=0.\\n    struct Price {\\n        bool isAvailable;\\n        int256 price;\\n        // Time the verified price became available.\\n        uint256 verifiedTime;\\n    }\\n\\n    // The two structs below are used in an array and mapping to keep track of prices that have been requested but are\\n    // not yet available.\\n    struct QueryIndex {\\n        bool isValid;\\n        uint256 index;\\n    }\\n\\n    // Represents a (identifier, time) point that has been queried.\\n    struct QueryPoint {\\n        bytes32 identifier;\\n        uint256 time;\\n        bytes ancillaryData;\\n    }\\n\\n    // Reference to the Finder.\\n    FinderInterface private finder;\\n\\n    // Conceptually we want a (time, identifier) -> price map.\\n    mapping(bytes32 => mapping(uint256 => mapping(bytes => Price))) private verifiedPrices;\\n\\n    // The mapping and array allow retrieving all the elements in a mapping and finding/deleting elements.\\n    // Can we generalize this data structure?\\n    mapping(bytes32 => mapping(uint256 => mapping(bytes => QueryIndex))) private queryIndices;\\n    QueryPoint[] private requestedPrices;\\n\\n    event PriceRequestAdded(address indexed requester, bytes32 indexed identifier, uint256 time, bytes ancillaryData);\\n    event PushedPrice(\\n        address indexed pusher,\\n        bytes32 indexed identifier,\\n        uint256 time,\\n        bytes ancillaryData,\\n        int256 price\\n    );\\n\\n    constructor(address _finderAddress, address _timerAddress) Testable(_timerAddress) {\\n        finder = FinderInterface(_finderAddress);\\n    }\\n\\n    // Enqueues a request (if a request isn't already present) for the given (identifier, time) pair.\\n\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    ) public override {\\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier));\\n        Price storage lookup = verifiedPrices[identifier][time][ancillaryData];\\n        if (!lookup.isAvailable && !queryIndices[identifier][time][ancillaryData].isValid) {\\n            // New query, enqueue it for review.\\n            queryIndices[identifier][time][ancillaryData] = QueryIndex(true, requestedPrices.length);\\n            requestedPrices.push(QueryPoint(identifier, time, ancillaryData));\\n            emit PriceRequestAdded(msg.sender, identifier, time, ancillaryData);\\n        }\\n    }\\n\\n    // Pushes the verified price for a requested query.\\n    function pushPrice(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData,\\n        int256 price\\n    ) external {\\n        verifiedPrices[identifier][time][ancillaryData] = Price(true, price, getCurrentTime());\\n\\n        QueryIndex storage queryIndex = queryIndices[identifier][time][ancillaryData];\\n        require(queryIndex.isValid, \\\"Can't push prices that haven't been requested\\\");\\n        // Delete from the array. Instead of shifting the queries over, replace the contents of `indexToReplace` with\\n        // the contents of the last index (unless it is the last index).\\n        uint256 indexToReplace = queryIndex.index;\\n        delete queryIndices[identifier][time][ancillaryData];\\n        uint256 lastIndex = requestedPrices.length - 1;\\n        if (lastIndex != indexToReplace) {\\n            QueryPoint storage queryToCopy = requestedPrices[lastIndex];\\n            queryIndices[queryToCopy.identifier][queryToCopy.time][queryToCopy.ancillaryData].index = indexToReplace;\\n            requestedPrices[indexToReplace] = queryToCopy;\\n        }\\n\\n        emit PushedPrice(msg.sender, identifier, time, ancillaryData, price);\\n    }\\n\\n    // Checks whether a price has been resolved.\\n    function hasPrice(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    ) public view override returns (bool) {\\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier));\\n        Price storage lookup = verifiedPrices[identifier][time][ancillaryData];\\n        return lookup.isAvailable;\\n    }\\n\\n    // Gets a price that has already been resolved.\\n    function getPrice(\\n        bytes32 identifier,\\n        uint256 time,\\n        bytes memory ancillaryData\\n    ) public view override returns (int256) {\\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier));\\n        Price storage lookup = verifiedPrices[identifier][time][ancillaryData];\\n        require(lookup.isAvailable);\\n        return lookup.price;\\n    }\\n\\n    // Gets the queries that still need verified prices.\\n    function getPendingQueries() external view returns (QueryPoint[] memory) {\\n        return requestedPrices;\\n    }\\n\\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface supportedIdentifiers) {\\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\\n    }\\n}\\n\",\"keccak256\":\"0x56d7ff54b2ecef3014788a06390435b7836c36d5a6fc2d4e8c252871e1486ee9\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516110e43803806110e483398101604081905261002f9161007f565b600080546001600160a01b039283166001600160a01b031991821617909155600180549390921692169190911790556100b1565b80516001600160a01b038116811461007a57600080fd5b919050565b60008060408385031215610091578182fd5b61009a83610063565b91506100a860208401610063565b90509250929050565b611024806100c06000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063719c6d561161005b578063719c6d56146100fb578063b551cd501461010e578063b555d60814610131578063d7d6f43d1461014657600080fd5b80631c39c38d1461008d578063216666a4146100bd57806322f8e566146100d257806329cb924d146100e5575b600080fd5b6000546100a0906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d06100cb366004610ccf565b610159565b005b6100d06100e0366004610d73565b6103cf565b6100ed610445565b6040519081526020016100b4565b6100ed610109366004610ccf565b6104e5565b61012161011c366004610ccf565b6105c8565b60405190151581526020016100b4565b61013961069c565b6040516100b49190610e86565b6100d0610154366004610d1d565b6107a1565b610161610a54565b6001600160a01b03166390978d1b846040518263ffffffff1660e01b815260040161018e91815260200190565b60206040518083038186803b1580156101a657600080fd5b505afa1580156101ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101de9190610caf565b6101e757600080fd5b6000838152600260209081526040808320858452909152808220905161020e908490610dcf565b908152604051908190036020019020805490915060ff1615801561026a57506000848152600360209081526040808320868452909152908190209051610255908490610dcf565b9081526040519081900360200190205460ff16155b156103c9576040805180820182526001815260045460208083019190915260008781526003825283812087825290915282902091519091906102ad908590610dcf565b90815260408051602092819003830181208451815460ff19169015151781559383015160019485015560608101825287815282810187815291810186815260048054958601815560005281517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b600390960295860190815592517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c86015551805191949293610381937f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d0192910190610ae6565b50505083336001600160a01b03167f4e8f92be7f49d3a5247918a98fff73bf4b214b2f5a2e2fe71c8666daeab4360385856040516103c0929190610f04565b60405180910390a35b50505050565b6000546001600160a01b03166103e457600080fd5b60005460405163117c72b360e11b8152600481018390526001600160a01b03909116906322f8e56690602401600060405180830381600087803b15801561042a57600080fd5b505af115801561043e573d6000803e3d6000fd5b5050505050565b600080546001600160a01b0316156104e05760008054906101000a90046001600160a01b03166001600160a01b03166329cb924d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104a357600080fd5b505afa1580156104b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db9190610d8b565b905090565b504290565b60006104ef610a54565b6001600160a01b03166390978d1b856040518263ffffffff1660e01b815260040161051c91815260200190565b60206040518083038186803b15801561053457600080fd5b505afa158015610548573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056c9190610caf565b61057557600080fd5b6000848152600260209081526040808320868452909152808220905161059c908590610dcf565b908152604051908190036020019020805490915060ff166105bc57600080fd5b60010154949350505050565b60006105d2610a54565b6001600160a01b03166390978d1b856040518263ffffffff1660e01b81526004016105ff91815260200190565b60206040518083038186803b15801561061757600080fd5b505afa15801561062b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064f9190610caf565b61065857600080fd5b6000848152600260209081526040808320868452909152808220905161067f908590610dcf565b9081526040519081900360200190205460ff169150509392505050565b60606004805480602002602001604051908101604052809291908181526020016000905b828210156107985783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201805461070790610f9d565b80601f016020809104026020016040519081016040528092919081815260200182805461073390610f9d565b80156107805780601f1061075557610100808354040283529160200191610780565b820191906000526020600020905b81548152906001019060200180831161076357829003601f168201915b505050505081525050815260200190600101906106c0565b50505050905090565b60405180606001604052806001151581526020018281526020016107c3610445565b905260008581526002602090815260408083208784529091529081902090516107ed908590610dcf565b90815260408051602092819003830181208451815460ff19169015151781558484015160018201559382015160029094019390935560008781526003835281812087825290925281209091610843908590610dcf565b908152604051908190036020019020805490915060ff166108c05760405162461bcd60e51b815260206004820152602d60248201527f43616e2774207075736820707269636573207468617420686176656e2774206260448201526c19595b881c995c5d595cdd1959609a1b606482015260840160405180910390fd5b600181015460008681526003602090815260408083208884529091529081902090516108ed908690610dcf565b908152604051908190036020019020805460ff1916815560006001918201819055600454909161091c91610f4e565b9050818114610a055760006004828154811061094857634e487b7160e01b600052603260045260246000fd5b6000918252602080832060039283020180548452918152604080842060018401548552909152918290209151909250849190610988906002850190610deb565b90815260200160405180910390206001018190555080600484815481106109bf57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600082015481600001556001820154816001015560028201816002019080546109f590610f9d565b610a00929190610b6a565b505050505b86336001600160a01b03167f766d17806eb1cbda2fa097f082481c7158f93c297beb98aafe57b78bae115d00888888604051610a4393929190610f25565b60405180910390a350505050505050565b6001546040516302abf57960e61b8152721259195b9d1a599a595c95da1a5d195b1a5cdd606a1b60048201526000916001600160a01b03169063aafd5e409060240160206040518083038186803b158015610aae57600080fd5b505afa158015610ac2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104db9190610c81565b828054610af290610f9d565b90600052602060002090601f016020900481019282610b145760008555610b5a565b82601f10610b2d57805160ff1916838001178555610b5a565b82800160010185558215610b5a579182015b82811115610b5a578251825591602001919060010190610b3f565b50610b66929150610be5565b5090565b828054610b7690610f9d565b90600052602060002090601f016020900481019282610b985760008555610b5a565b82601f10610ba95780548555610b5a565b82800160010185558215610b5a57600052602060002091601f016020900482015b82811115610b5a578254825591600101919060010190610bca565b5b80821115610b665760008155600101610be6565b600082601f830112610c0a578081fd5b813567ffffffffffffffff80821115610c2557610c25610fd8565b604051601f8301601f19908116603f01168101908282118183101715610c4d57610c4d610fd8565b81604052838152866020858801011115610c65578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215610c92578081fd5b81516001600160a01b0381168114610ca8578182fd5b9392505050565b600060208284031215610cc0578081fd5b81518015158114610ca8578182fd5b600080600060608486031215610ce3578182fd5b8335925060208401359150604084013567ffffffffffffffff811115610d07578182fd5b610d1386828701610bfa565b9150509250925092565b60008060008060808587031215610d32578081fd5b8435935060208501359250604085013567ffffffffffffffff811115610d56578182fd5b610d6287828801610bfa565b949793965093946060013593505050565b600060208284031215610d84578081fd5b5035919050565b600060208284031215610d9c578081fd5b5051919050565b60008151808452610dbb816020860160208601610f71565b601f01601f19169290920160200192915050565b60008251610de1818460208701610f71565b9190910192915050565b600080835482600182811c915080831680610e0757607f831692505b6020808410821415610e2757634e487b7160e01b87526022600452602487fd5b818015610e3b5760018114610e4c57610e78565b60ff19861689528489019650610e78565b60008a815260209020885b86811015610e705781548b820152908501908301610e57565b505084890196505b509498975050505050505050565b60006020808301818452808551808352604092508286019150828160051b870101848801865b83811015610ef657888303603f1901855281518051845287810151888501528601516060878501819052610ee281860183610da3565b968901969450505090860190600101610eac565b509098975050505050505050565b828152604060208201526000610f1d6040830184610da3565b949350505050565b838152606060208201526000610f3e6060830185610da3565b9050826040830152949350505050565b600082821015610f6c57634e487b7160e01b81526011600452602481fd5b500390565b60005b83811015610f8c578181015183820152602001610f74565b838111156103c95750506000910152565b600181811c90821680610fb157607f821691505b60208210811415610fd257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea264697066735822122092d360ff178576c65635f056408cc74a796a3c291c5d5165ab7e2e3ec218838464736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getCurrentTime()": {
        "returns": {
          "_0": "uint for the current Testable timestamp."
        }
      },
      "getPrice(bytes32,uint256,bytes)": {
        "details": "If the price is not available, the method reverts.",
        "params": {
          "ancillaryData": "arbitrary data appended to a price request to give the voters more info from the caller.",
          "identifier": "uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.",
          "time": "unix timestamp for the price request."
        },
        "returns": {
          "_0": "int256 representing the resolved price for the given identifier and timestamp."
        }
      },
      "hasPrice(bytes32,uint256,bytes)": {
        "details": "Time must be in the past and the identifier must be supported.",
        "params": {
          "ancillaryData": "arbitrary data appended to a price request to give the voters more info from the caller.",
          "identifier": "uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.",
          "time": "unix timestamp for the price request."
        },
        "returns": {
          "_0": "bool if the DVM has resolved to a price for the given identifier and timestamp."
        }
      },
      "requestPrice(bytes32,uint256,bytes)": {
        "details": "Time must be in the past and the identifier must be supported.",
        "params": {
          "ancillaryData": "arbitrary data appended to a price request to give the voters more info from the caller.",
          "identifier": "uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.",
          "time": "unix timestamp for the price request."
        }
      },
      "setCurrentTime(uint256)": {
        "details": "Will revert if not running in test mode.",
        "params": {
          "time": "timestamp to set current Testable time to."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCurrentTime()": {
        "notice": "Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp."
      },
      "getPrice(bytes32,uint256,bytes)": {
        "notice": "Gets the price for `identifier` and `time` if it has already been requested and resolved."
      },
      "hasPrice(bytes32,uint256,bytes)": {
        "notice": "Whether the price for `identifier` and `time` is available."
      },
      "requestPrice(bytes32,uint256,bytes)": {
        "notice": "Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair."
      },
      "setCurrentTime(uint256)": {
        "notice": "Sets the current time."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10674,
        "contract": "contracts/oracle/test/MockOracleAncillary.sol:MockOracleAncillary",
        "label": "timerAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 33366,
        "contract": "contracts/oracle/test/MockOracleAncillary.sol:MockOracleAncillary",
        "label": "finder",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(FinderInterface)32285"
      },
      {
        "astId": 33375,
        "contract": "contracts/oracle/test/MockOracleAncillary.sol:MockOracleAncillary",
        "label": "verifiedPrices",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_bytes_memory_ptr,t_struct(Price)33351_storage)))"
      },
      {
        "astId": 33384,
        "contract": "contracts/oracle/test/MockOracleAncillary.sol:MockOracleAncillary",
        "label": "queryIndices",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_bytes_memory_ptr,t_struct(QueryIndex)33356_storage)))"
      },
      {
        "astId": 33388,
        "contract": "contracts/oracle/test/MockOracleAncillary.sol:MockOracleAncillary",
        "label": "requestedPrices",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(QueryPoint)33363_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(QueryPoint)33363_storage)dyn_storage": {
        "base": "t_struct(QueryPoint)33363_storage",
        "encoding": "dynamic_array",
        "label": "struct MockOracleAncillary.QueryPoint[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(FinderInterface)32285": {
        "encoding": "inplace",
        "label": "contract FinderInterface",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_bytes_memory_ptr,t_struct(Price)33351_storage)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => mapping(bytes => struct MockOracleAncillary.Price)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_bytes_memory_ptr,t_struct(Price)33351_storage))"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_bytes_memory_ptr,t_struct(QueryIndex)33356_storage)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => mapping(bytes => struct MockOracleAncillary.QueryIndex)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_bytes_memory_ptr,t_struct(QueryIndex)33356_storage))"
      },
      "t_mapping(t_bytes_memory_ptr,t_struct(Price)33351_storage)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => struct MockOracleAncillary.Price)",
        "numberOfBytes": "32",
        "value": "t_struct(Price)33351_storage"
      },
      "t_mapping(t_bytes_memory_ptr,t_struct(QueryIndex)33356_storage)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => struct MockOracleAncillary.QueryIndex)",
        "numberOfBytes": "32",
        "value": "t_struct(QueryIndex)33356_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_bytes_memory_ptr,t_struct(Price)33351_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bytes => struct MockOracleAncillary.Price))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_struct(Price)33351_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_bytes_memory_ptr,t_struct(QueryIndex)33356_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(bytes => struct MockOracleAncillary.QueryIndex))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_struct(QueryIndex)33356_storage)"
      },
      "t_struct(Price)33351_storage": {
        "encoding": "inplace",
        "label": "struct MockOracleAncillary.Price",
        "members": [
          {
            "astId": 33346,
            "contract": "contracts/oracle/test/MockOracleAncillary.sol:MockOracleAncillary",
            "label": "isAvailable",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 33348,
            "contract": "contracts/oracle/test/MockOracleAncillary.sol:MockOracleAncillary",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 33350,
            "contract": "contracts/oracle/test/MockOracleAncillary.sol:MockOracleAncillary",
            "label": "verifiedTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(QueryIndex)33356_storage": {
        "encoding": "inplace",
        "label": "struct MockOracleAncillary.QueryIndex",
        "members": [
          {
            "astId": 33353,
            "contract": "contracts/oracle/test/MockOracleAncillary.sol:MockOracleAncillary",
            "label": "isValid",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 33355,
            "contract": "contracts/oracle/test/MockOracleAncillary.sol:MockOracleAncillary",
            "label": "index",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(QueryPoint)33363_storage": {
        "encoding": "inplace",
        "label": "struct MockOracleAncillary.QueryPoint",
        "members": [
          {
            "astId": 33358,
            "contract": "contracts/oracle/test/MockOracleAncillary.sol:MockOracleAncillary",
            "label": "identifier",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 33360,
            "contract": "contracts/oracle/test/MockOracleAncillary.sol:MockOracleAncillary",
            "label": "time",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 33362,
            "contract": "contracts/oracle/test/MockOracleAncillary.sol:MockOracleAncillary",
            "label": "ancillaryData",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}