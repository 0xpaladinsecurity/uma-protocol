{
  "address": "0x4da2fD75dd26A8C8A0a8Db892019651344705836",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "AddedSharedMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "parties",
          "type": "address[]"
        }
      ],
      "name": "NewContractRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "PartyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "PartyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldMember",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "RemovedSharedMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ResetExclusiveMember",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "addPartyToContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "contractMap",
      "outputs": [
        {
          "internalType": "enum Registry.Validity",
          "name": "valid",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "index",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRegisteredContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        }
      ],
      "name": "getMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        }
      ],
      "name": "getRegisteredContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "memberToCheck",
          "type": "address"
        }
      ],
      "name": "holdsRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "isContractRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "party",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "isPartyMemberOfContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "parties",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "registerContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredContracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "memberToRemove",
          "type": "address"
        }
      ],
      "name": "removeMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "partyAddress",
          "type": "address"
        }
      ],
      "name": "removePartyFromContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        }
      ],
      "name": "renounceMembership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        }
      ],
      "name": "resetMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x65ad51e4d2984b85cf791444c66e75042cda7e0ba9a415c5d6e6edd7ed4fbab3",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0x4da2fD75dd26A8C8A0a8Db892019651344705836",
    "transactionIndex": 15,
    "gasUsed": "1264697",
    "logsBloom": "0x
    "blockHash": "0x15191212664ff7f9ad306f7c1020793519efe2fb214db1b4ee1f2be39478d13c",
    "transactionHash": "0x65ad51e4d2984b85cf791444c66e75042cda7e0ba9a415c5d6e6edd7ed4fbab3",
    "logs": [],
    "blockNumber": 4746604,
    "cumulativeGasUsed": "3910226",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "87af3bddb96fa5cfcfc99d0e6fd39498",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"AddedSharedMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"parties\",\"type\":\"address[]\"}],\"name\":\"NewContractRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"PartyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"PartyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMember\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"RemovedSharedMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ResetExclusiveMember\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"addPartyToContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"contractMap\",\"outputs\":[{\"internalType\":\"enum Registry.Validity\",\"name\":\"valid\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"index\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRegisteredContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"}],\"name\":\"getMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"}],\"name\":\"getRegisteredContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"memberToCheck\",\"type\":\"address\"}],\"name\":\"holdsRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isContractRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"party\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"isPartyMemberOfContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"parties\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"registerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"memberToRemove\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"partyAddress\",\"type\":\"address\"}],\"name\":\"removePartyFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"}],\"name\":\"renounceMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"}],\"name\":\"resetMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Maintains a whitelist of financial contract creators that are allowed to register new financial contracts and stores party members of a financial contract.\",\"kind\":\"dev\",\"methods\":{\"addMember(uint256,address)\":{\"details\":\"Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.\",\"params\":{\"newMember\":\"the new SharedRole member.\",\"roleId\":\"the SharedRole membership to modify.\"}},\"addPartyToContract(address)\":{\"details\":\"msg.sender will be used to determine the contract that this party is added to.\",\"params\":{\"party\":\"new party for the calling contract.\"}},\"getAllRegisteredContracts()\":{\"returns\":{\"_0\":\"all registered contract addresses within the system.\"}},\"getMember(uint256)\":{\"details\":\"Reverts if `roleId` does not represent an initialized, exclusive role.\",\"params\":{\"roleId\":\"the ExclusiveRole membership to check.\"},\"returns\":{\"_0\":\"the address of the current ExclusiveRole member.\"}},\"getRegisteredContracts(address)\":{\"params\":{\"party\":\"address of the party.\"},\"returns\":{\"_0\":\"an array of the contracts the party is registered to.\"}},\"holdsRole(uint256,address)\":{\"details\":\"Reverts if roleId does not correspond to an initialized role.\",\"params\":{\"memberToCheck\":\"the address to check.\",\"roleId\":\"the Role to check.\"},\"returns\":{\"_0\":\"True if `memberToCheck` is a member of `roleId`.\"}},\"isContractRegistered(address)\":{\"details\":\"If it is registered, it is an authorized participant in the UMA system.\",\"params\":{\"contractAddress\":\"address of the financial contract.\"},\"returns\":{\"_0\":\"bool indicates whether the contract is registered.\"}},\"isPartyMemberOfContract(address,address)\":{\"params\":{\"contractAddress\":\"address to check against the party.\",\"party\":\"party to check.\"},\"returns\":{\"_0\":\"bool indicating if the address is a party of the contract.\"}},\"registerContract(address[],address)\":{\"details\":\"Only authorized contract creators can call this method.\",\"params\":{\"contractAddress\":\"address of the contract against which the parties are registered.\",\"parties\":\"array of addresses who become parties in the contract.\"}},\"removeMember(uint256,address)\":{\"details\":\"Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.\",\"params\":{\"memberToRemove\":\"the current SharedRole member to remove.\",\"roleId\":\"the SharedRole membership to modify.\"}},\"removePartyFromContract(address)\":{\"details\":\"msg.sender will be used to determine the contract that this party is removed from.\",\"params\":{\"partyAddress\":\"address to be removed from the calling contract.\"}},\"renounceMembership(uint256)\":{\"details\":\"Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.\",\"params\":{\"roleId\":\"the SharedRole membership to modify.\"}},\"resetMember(uint256,address)\":{\"details\":\"Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.\",\"params\":{\"newMember\":\"the new ExclusiveRole member.\",\"roleId\":\"the ExclusiveRole membership to modify.\"}}},\"title\":\"Registry for financial contracts and approved financial contract creators.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMember(uint256,address)\":{\"notice\":\"Adds `newMember` to the shared role, `roleId`.\"},\"addPartyToContract(address)\":{\"notice\":\"Adds a party member to the calling contract.\"},\"constructor\":{\"notice\":\"Construct the Registry contract.\"},\"getAllRegisteredContracts()\":{\"notice\":\"Returns all registered contracts.\"},\"getMember(uint256)\":{\"notice\":\"Gets the current holder of the exclusive role, `roleId`.\"},\"getRegisteredContracts(address)\":{\"notice\":\"Returns a list of all contracts that are associated with a particular party.\"},\"holdsRole(uint256,address)\":{\"notice\":\"Whether `memberToCheck` is a member of roleId.\"},\"isContractRegistered(address)\":{\"notice\":\"Returns whether the contract has been registered with the registry.\"},\"isPartyMemberOfContract(address,address)\":{\"notice\":\"checks if an address is a party of a contract.\"},\"registerContract(address[],address)\":{\"notice\":\"Registers a new financial contract.\"},\"removeMember(uint256,address)\":{\"notice\":\"Removes `memberToRemove` from the shared role, `roleId`.\"},\"removePartyFromContract(address)\":{\"notice\":\"Removes a party member from the calling contract.\"},\"renounceMembership(uint256)\":{\"notice\":\"Removes caller from the role, `roleId`.\"},\"resetMember(uint256,address)\":{\"notice\":\"Changes the exclusive role holder of `roleId` to `newMember`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/implementation/Registry.sol\":\"Registry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":199},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/common/implementation/MultiRole.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nlibrary Exclusive {\\n    struct RoleMembership {\\n        address member;\\n    }\\n\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\n        return roleMembership.member == memberToCheck;\\n    }\\n\\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\\n        require(newMember != address(0x0), \\\"Cannot set an exclusive role to 0x0\\\");\\n        roleMembership.member = newMember;\\n    }\\n\\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\\n        return roleMembership.member;\\n    }\\n\\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\\n        resetMember(roleMembership, initialMember);\\n    }\\n}\\n\\nlibrary Shared {\\n    struct RoleMembership {\\n        mapping(address => bool) members;\\n    }\\n\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\n        return roleMembership.members[memberToCheck];\\n    }\\n\\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\\n        require(memberToAdd != address(0x0), \\\"Cannot add 0x0 to a shared role\\\");\\n        roleMembership.members[memberToAdd] = true;\\n    }\\n\\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\\n        roleMembership.members[memberToRemove] = false;\\n    }\\n\\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\\n        for (uint256 i = 0; i < initialMembers.length; i++) {\\n            addMember(roleMembership, initialMembers[i]);\\n        }\\n    }\\n}\\n\\n/**\\n * @title Base class to manage permissions for the derived class.\\n */\\nabstract contract MultiRole {\\n    using Exclusive for Exclusive.RoleMembership;\\n    using Shared for Shared.RoleMembership;\\n\\n    enum RoleType { Invalid, Exclusive, Shared }\\n\\n    struct Role {\\n        uint256 managingRole;\\n        RoleType roleType;\\n        Exclusive.RoleMembership exclusiveRoleMembership;\\n        Shared.RoleMembership sharedRoleMembership;\\n    }\\n\\n    mapping(uint256 => Role) private roles;\\n\\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\\n\\n    /**\\n     * @notice Reverts unless the caller is a member of the specified roleId.\\n     */\\n    modifier onlyRoleHolder(uint256 roleId) {\\n        require(holdsRole(roleId, msg.sender), \\\"Sender does not hold required role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\\n     */\\n    modifier onlyRoleManager(uint256 roleId) {\\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \\\"Can only be called by a role manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\\n     */\\n    modifier onlyExclusive(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Exclusive, \\\"Must be called on an initialized Exclusive role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\\n     */\\n    modifier onlyShared(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Shared, \\\"Must be called on an initialized Shared role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Whether `memberToCheck` is a member of roleId.\\n     * @dev Reverts if roleId does not correspond to an initialized role.\\n     * @param roleId the Role to check.\\n     * @param memberToCheck the address to check.\\n     * @return True if `memberToCheck` is a member of `roleId`.\\n     */\\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\\n        Role storage role = roles[roleId];\\n        if (role.roleType == RoleType.Exclusive) {\\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\\n        } else if (role.roleType == RoleType.Shared) {\\n            return role.sharedRoleMembership.isMember(memberToCheck);\\n        }\\n        revert(\\\"Invalid roleId\\\");\\n    }\\n\\n    /**\\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\\n     * initialized, ExclusiveRole.\\n     * @param roleId the ExclusiveRole membership to modify.\\n     * @param newMember the new ExclusiveRole member.\\n     */\\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Gets the current holder of the exclusive role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\\n     * @param roleId the ExclusiveRole membership to check.\\n     * @return the address of the current ExclusiveRole member.\\n     */\\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\\n        return roles[roleId].exclusiveRoleMembership.getMember();\\n    }\\n\\n    /**\\n     * @notice Adds `newMember` to the shared role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\n     * managing role for `roleId`.\\n     * @param roleId the SharedRole membership to modify.\\n     * @param newMember the new SharedRole member.\\n     */\\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].sharedRoleMembership.addMember(newMember);\\n        emit AddedSharedMember(roleId, newMember, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\n     * managing role for `roleId`.\\n     * @param roleId the SharedRole membership to modify.\\n     * @param memberToRemove the current SharedRole member to remove.\\n     */\\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Removes caller from the role, `roleId`.\\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\\n     * initialized, SharedRole.\\n     * @param roleId the SharedRole membership to modify.\\n     */\\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Reverts if `roleId` is not initialized.\\n     */\\n    modifier onlyValidRole(uint256 roleId) {\\n        require(roles[roleId].roleType != RoleType.Invalid, \\\"Attempted to use an invalid roleId\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if `roleId` is initialized.\\n     */\\n    modifier onlyInvalidRole(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Invalid, \\\"Cannot use a pre-existing role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\\n     * `initialMembers` will be immediately added to the role.\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\n     * initialized.\\n     */\\n    function _createSharedRole(\\n        uint256 roleId,\\n        uint256 managingRoleId,\\n        address[] memory initialMembers\\n    ) internal onlyInvalidRole(roleId) {\\n        Role storage role = roles[roleId];\\n        role.roleType = RoleType.Shared;\\n        role.managingRole = managingRoleId;\\n        role.sharedRoleMembership.init(initialMembers);\\n        require(\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\n            \\\"Attempted to use an invalid role to manage a shared role\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\\n     * `initialMember` will be immediately added to the role.\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\n     * initialized.\\n     */\\n    function _createExclusiveRole(\\n        uint256 roleId,\\n        uint256 managingRoleId,\\n        address initialMember\\n    ) internal onlyInvalidRole(roleId) {\\n        Role storage role = roles[roleId];\\n        role.roleType = RoleType.Exclusive;\\n        role.managingRole = managingRoleId;\\n        role.exclusiveRoleMembership.init(initialMember);\\n        require(\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\n            \\\"Attempted to use an invalid role to manage an exclusive role\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x134c5a2f847832705be631f2b4eb2a3e23a91a2f0e63560abb481e85eeebfae6\",\"license\":\"AGPL-3.0-only\"},\"contracts/oracle/implementation/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../../common/implementation/MultiRole.sol\\\";\\nimport \\\"../interfaces/RegistryInterface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Registry for financial contracts and approved financial contract creators.\\n * @dev Maintains a whitelist of financial contract creators that are allowed\\n * to register new financial contracts and stores party members of a financial contract.\\n */\\ncontract Registry is RegistryInterface, MultiRole {\\n    using SafeMath for uint256;\\n\\n    /****************************************\\n     *    INTERNAL VARIABLES AND STORAGE    *\\n     ****************************************/\\n\\n    enum Roles {\\n        Owner, // The owner manages the set of ContractCreators.\\n        ContractCreator // Can register financial contracts.\\n    }\\n\\n    // This enum is required because a `WasValid` state is required\\n    // to ensure that financial contracts cannot be re-registered.\\n    enum Validity { Invalid, Valid }\\n\\n    // Local information about a contract.\\n    struct FinancialContract {\\n        Validity valid;\\n        uint128 index;\\n    }\\n\\n    struct Party {\\n        address[] contracts; // Each financial contract address is stored in this array.\\n        // The address of each financial contract is mapped to its index for constant time look up and deletion.\\n        mapping(address => uint256) contractIndex;\\n    }\\n\\n    // Array of all contracts that are approved to use the UMA Oracle.\\n    address[] public registeredContracts;\\n\\n    // Map of financial contract contracts to the associated FinancialContract struct.\\n    mapping(address => FinancialContract) public contractMap;\\n\\n    // Map each party member to their their associated Party struct.\\n    mapping(address => Party) private partyMap;\\n\\n    /****************************************\\n     *                EVENTS                *\\n     ****************************************/\\n\\n    event NewContractRegistered(address indexed contractAddress, address indexed creator, address[] parties);\\n    event PartyAdded(address indexed contractAddress, address indexed party);\\n    event PartyRemoved(address indexed contractAddress, address indexed party);\\n\\n    /**\\n     * @notice Construct the Registry contract.\\n     */\\n    constructor() {\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\\n        // Start with no contract creators registered.\\n        _createSharedRole(uint256(Roles.ContractCreator), uint256(Roles.Owner), new address[](0));\\n    }\\n\\n    /****************************************\\n     *        REGISTRATION FUNCTIONS        *\\n     ****************************************/\\n\\n    /**\\n     * @notice Registers a new financial contract.\\n     * @dev Only authorized contract creators can call this method.\\n     * @param parties array of addresses who become parties in the contract.\\n     * @param contractAddress address of the contract against which the parties are registered.\\n     */\\n    function registerContract(address[] calldata parties, address contractAddress)\\n        external\\n        override\\n        onlyRoleHolder(uint256(Roles.ContractCreator))\\n    {\\n        FinancialContract storage financialContract = contractMap[contractAddress];\\n        require(contractMap[contractAddress].valid == Validity.Invalid, \\\"Can only register once\\\");\\n\\n        // Store contract address as a registered contract.\\n        registeredContracts.push(contractAddress);\\n\\n        // No length check necessary because we should never hit (2^127 - 1) contracts.\\n        financialContract.index = uint128(registeredContracts.length.sub(1));\\n\\n        // For all parties in the array add them to the contract's parties.\\n        financialContract.valid = Validity.Valid;\\n        for (uint256 i = 0; i < parties.length; i = i.add(1)) {\\n            _addPartyToContract(parties[i], contractAddress);\\n        }\\n\\n        emit NewContractRegistered(contractAddress, msg.sender, parties);\\n    }\\n\\n    /**\\n     * @notice Adds a party member to the calling contract.\\n     * @dev msg.sender will be used to determine the contract that this party is added to.\\n     * @param party new party for the calling contract.\\n     */\\n    function addPartyToContract(address party) external override {\\n        address contractAddress = msg.sender;\\n        require(contractMap[contractAddress].valid == Validity.Valid, \\\"Can only add to valid contract\\\");\\n\\n        _addPartyToContract(party, contractAddress);\\n    }\\n\\n    /**\\n     * @notice Removes a party member from the calling contract.\\n     * @dev msg.sender will be used to determine the contract that this party is removed from.\\n     * @param partyAddress address to be removed from the calling contract.\\n     */\\n    function removePartyFromContract(address partyAddress) external override {\\n        address contractAddress = msg.sender;\\n        Party storage party = partyMap[partyAddress];\\n        uint256 numberOfContracts = party.contracts.length;\\n\\n        require(numberOfContracts != 0, \\\"Party has no contracts\\\");\\n        require(contractMap[contractAddress].valid == Validity.Valid, \\\"Remove only from valid contract\\\");\\n        require(isPartyMemberOfContract(partyAddress, contractAddress), \\\"Can only remove existing party\\\");\\n\\n        // Index of the current location of the contract to remove.\\n        uint256 deleteIndex = party.contractIndex[contractAddress];\\n\\n        // Store the last contract's address to update the lookup map.\\n        address lastContractAddress = party.contracts[numberOfContracts - 1];\\n\\n        // Swap the contract to be removed with the last contract.\\n        party.contracts[deleteIndex] = lastContractAddress;\\n\\n        // Update the lookup index with the new location.\\n        party.contractIndex[lastContractAddress] = deleteIndex;\\n\\n        // Pop the last contract from the array and update the lookup map.\\n        party.contracts.pop();\\n        delete party.contractIndex[contractAddress];\\n\\n        emit PartyRemoved(contractAddress, partyAddress);\\n    }\\n\\n    /****************************************\\n     *         REGISTRY STATE GETTERS       *\\n     ****************************************/\\n\\n    /**\\n     * @notice Returns whether the contract has been registered with the registry.\\n     * @dev If it is registered, it is an authorized participant in the UMA system.\\n     * @param contractAddress address of the financial contract.\\n     * @return bool indicates whether the contract is registered.\\n     */\\n    function isContractRegistered(address contractAddress) external view override returns (bool) {\\n        return contractMap[contractAddress].valid == Validity.Valid;\\n    }\\n\\n    /**\\n     * @notice Returns a list of all contracts that are associated with a particular party.\\n     * @param party address of the party.\\n     * @return an array of the contracts the party is registered to.\\n     */\\n    function getRegisteredContracts(address party) external view override returns (address[] memory) {\\n        return partyMap[party].contracts;\\n    }\\n\\n    /**\\n     * @notice Returns all registered contracts.\\n     * @return all registered contract addresses within the system.\\n     */\\n    function getAllRegisteredContracts() external view override returns (address[] memory) {\\n        return registeredContracts;\\n    }\\n\\n    /**\\n     * @notice checks if an address is a party of a contract.\\n     * @param party party to check.\\n     * @param contractAddress address to check against the party.\\n     * @return bool indicating if the address is a party of the contract.\\n     */\\n    function isPartyMemberOfContract(address party, address contractAddress) public view override returns (bool) {\\n        uint256 index = partyMap[party].contractIndex[contractAddress];\\n        return partyMap[party].contracts.length > index && partyMap[party].contracts[index] == contractAddress;\\n    }\\n\\n    /****************************************\\n     *           INTERNAL FUNCTIONS         *\\n     ****************************************/\\n\\n    function _addPartyToContract(address party, address contractAddress) internal {\\n        require(!isPartyMemberOfContract(party, contractAddress), \\\"Can only register a party once\\\");\\n        uint256 contractIndex = partyMap[party].contracts.length;\\n        partyMap[party].contracts.push(contractAddress);\\n        partyMap[party].contractIndex[contractAddress] = contractIndex;\\n\\n        emit PartyAdded(contractAddress, party);\\n    }\\n}\\n\",\"keccak256\":\"0xb2d0d0e24527e572a1c8dad28eaaf2324cc5a7eddb4ff43634f8a4473d729ea7\",\"license\":\"AGPL-3.0-only\"},\"contracts/oracle/interfaces/RegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\npragma abicoder v2;\\n\\n/**\\n * @title Interface for a registry of contracts and contract creators.\\n */\\ninterface RegistryInterface {\\n    /**\\n     * @notice Registers a new contract.\\n     * @dev Only authorized contract creators can call this method.\\n     * @param parties an array of addresses who become parties in the contract.\\n     * @param contractAddress defines the address of the deployed contract.\\n     */\\n    function registerContract(address[] calldata parties, address contractAddress) external;\\n\\n    /**\\n     * @notice Returns whether the contract has been registered with the registry.\\n     * @dev If it is registered, it is an authorized participant in the UMA system.\\n     * @param contractAddress address of the contract.\\n     * @return bool indicates whether the contract is registered.\\n     */\\n    function isContractRegistered(address contractAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of all contracts that are associated with a particular party.\\n     * @param party address of the party.\\n     * @return an array of the contracts the party is registered to.\\n     */\\n    function getRegisteredContracts(address party) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns all registered contracts.\\n     * @return all registered contract addresses within the system.\\n     */\\n    function getAllRegisteredContracts() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Adds a party to the calling contract.\\n     * @dev msg.sender must be the contract to which the party member is added.\\n     * @param party address to be added to the contract.\\n     */\\n    function addPartyToContract(address party) external;\\n\\n    /**\\n     * @notice Removes a party member to the calling contract.\\n     * @dev msg.sender must be the contract to which the party member is added.\\n     * @param party address to be removed from the contract.\\n     */\\n    function removePartyFromContract(address party) external;\\n\\n    /**\\n     * @notice checks if an address is a party in a contract.\\n     * @param party party to check.\\n     * @param contractAddress address to check against the party.\\n     * @return bool indicating if the address is a party of the contract.\\n     */\\n    function isPartyMemberOfContract(address party, address contractAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x49ffab487eae545b82549854a6f804e7274ef89980895df7a1fb0ec1b5a0098b\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000206000803362000044565b604080516000808252602082019092526200003e91600191620001ad565b620004a1565b826000808281526020819052604090206001015460ff1660028111156200007b57634e487b7160e01b600052602160045260246000fd5b14620000ce5760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c65000060448201526064015b60405180910390fd5b60008481526020819052604090206001808201805460ff1916828002179055508381556200010c60028201846200030a602090811b62000e3717901c565b60008481526020819052604081206001015460ff1660028111156200014157634e487b7160e01b600052602160045260246000fd5b1415620001a65760405162461bcd60e51b815260206004820152603c6024820152600080516020620018f883398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152608401620000c5565b5050505050565b826000808281526020819052604090206001015460ff166002811115620001e457634e487b7160e01b600052602160045260246000fd5b14620002335760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152606401620000c5565b60008481526020818152604090912060018101805460ff191660021790558481559062000270906003830190859062000e416200031a821b17901c565b60008481526020819052604081206001015460ff166002811115620002a557634e487b7160e01b600052602160045260246000fd5b1415620001a65760405162461bcd60e51b81526020600482015260386024820152600080516020620018f883398151915260448201527f20746f206d616e61676520612073686172656420726f6c6500000000000000006064820152608401620000c5565b6200031682826200037b565b5050565b60005b8151811015620003765762000361838383815181106200034d57634e487b7160e01b600052603260045260246000fd5b6020026020010151620003fc60201b60201c565b806200036d8162000479565b9150506200031d565b505050565b6001600160a01b038116620003df5760405162461bcd60e51b815260206004820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152608401620000c5565b81546001600160a01b0319166001600160a01b0391909116179055565b6001600160a01b038116620004545760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152606401620000c5565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006000198214156200049a57634e487b7160e01b81526011600452602481fd5b5060010190565b61144780620004b16000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806374d0a67611610097578063ab3545e511610066578063ab3545e514610216578063d97c05be14610241578063e33c4cd214610254578063f9f6b49b1461026757600080fd5b806374d0a676146101ba5780637a3edab0146101cd5780637cdc1cb9146101f0578063aaa14ca31461020357600080fd5b8063303118d0116100d3578063303118d0146101405780633c0af3441461015357806366c8c250146101945780636be7658b146101a757600080fd5b80631676ddc3146100fa578063167cdde714610118578063188c6ff81461012d575b600080fd5b61010261027a565b60405161010f9190611209565b60405180910390f35b61012b6101263660046110b8565b6102dc565b005b61010261013b3660046110b8565b610370565b61012b61014e3660046110b8565b6103e6565b6101866101613660046110b8565b60026020526000908152604090205460ff81169061010090046001600160801b031682565b60405161010f929190611256565b61012b6101a2366004611104565b61067b565b61012b6101b536600461119b565b61085e565b61012b6101c836600461119b565b610942565b6101e06101db3660046110d2565b610a26565b604051901515815260200161010f565b6101e06101fe36600461119b565b610abd565b61012b610211366004611183565b610ba0565b610229610224366004611183565b610c6a565b6040516001600160a01b03909116815260200161010f565b61012b61024f36600461119b565b610ce3565b610229610262366004611183565b610dc7565b6101e06102753660046110b8565b610df1565b606060018054806020026020016040519081016040528092919081815260200182805480156102d257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102b4575b5050505050905090565b3360008181526002602052604090205460019060ff168181111561031057634e487b7160e01b600052602160045260246000fd5b146103625760405162461bcd60e51b815260206004820152601e60248201527f43616e206f6e6c792061646420746f2076616c696420636f6e7472616374000060448201526064015b60405180910390fd5b61036c8282610e95565b5050565b6001600160a01b0381166000908152600360209081526040918290208054835181840281018401909452808452606093928301828280156103da57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103bc575b50505050509050919050565b6001600160a01b03811660009081526003602052604090208054339190806104495760405162461bcd60e51b8152602060048201526016602482015275506172747920686173206e6f20636f6e74726163747360501b6044820152606401610359565b60016001600160a01b03841660009081526002602052604090205460ff16600181111561048657634e487b7160e01b600052602160045260246000fd5b146104d35760405162461bcd60e51b815260206004820152601f60248201527f52656d6f7665206f6e6c792066726f6d2076616c696420636f6e7472616374006044820152606401610359565b6104dd8484610a26565b6105295760405162461bcd60e51b815260206004820152601e60248201527f43616e206f6e6c792072656d6f7665206578697374696e6720706172747900006044820152606401610359565b6001600160a01b0383166000908152600180840160205260408220549190849061055390856113c9565b8154811061057157634e487b7160e01b600052603260045260246000fd5b60009182526020909120015484546001600160a01b03909116915081908590849081106105ae57634e487b7160e01b600052603260045260246000fd5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591831681526001860190915260409020829055835484908061060857634e487b7160e01b600052603160045260246000fd5b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b0387811680845260018801909252604080842084905551908916927f8e0a870c3ff65bd1f2852048eb92d693833891a8c0ab0827347177544464c57091a3505050505050565b60016106878133610abd565b6106a35760405162461bcd60e51b81526004016103599061132b565b6001600160a01b0382166000908152600260205260408120805490919060ff1660018111156106e257634e487b7160e01b600052602160045260246000fd5b146107285760405162461bcd60e51b815260206004820152601660248201527543616e206f6e6c79207265676973746572206f6e636560501b6044820152606401610359565b60018054808201825560008290527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b038616179055805461077c91610f68565b815460016001600160801b03929092166101000260ff191670ffffffffffffffffffffffffffffffffff199091161717815560005b84811015610809576107f78686838181106107dc57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906107f191906110b8565b85610e95565b610802816001610f74565b90506107b1565b50336001600160a01b0316836001600160a01b03167f1b0bc775e5162f873356bcc1733155bd2eb9509f1774770f54b4f938287bcf03878760405161084f9291906111bd565b60405180910390a35050505050565b81600260008281526020819052604090206001015460ff16600281111561089557634e487b7160e01b600052602160045260246000fd5b146108b25760405162461bcd60e51b8152600401610359906112df565b60008381526020819052604090205483906108cd9033610abd565b6108e95760405162461bcd60e51b81526004016103599061136d565b60008481526020819052604090206109049060030184610f80565b60405133906001600160a01b0385169086907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af90600090a450505050565b81600260008281526020819052604090206001015460ff16600281111561097957634e487b7160e01b600052602160045260246000fd5b146109965760405162461bcd60e51b8152600401610359906112df565b60008381526020819052604090205483906109b19033610abd565b6109cd5760405162461bcd60e51b81526004016103599061136d565b60008481526020819052604090206109e89060030184610fa2565b60405133906001600160a01b0385169086907f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f90600090a450505050565b6001600160a01b038083166000818152600360208181526040808420958716845260018601825283205493835252915481108015610ab357506001600160a01b03848116600090815260036020526040902080549185169183908110610a9c57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316145b9150505b92915050565b600082815260208190526040812060018082015460ff166002811115610af357634e487b7160e01b600052602160045260246000fd5b1415610b155760028101546001600160a01b038481169116145b915050610ab7565b6002600182015460ff166002811115610b3e57634e487b7160e01b600052602160045260246000fd5b1415610b67576001600160a01b038316600090815260038201602052604090205460ff16610b0d565b60405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c9bdb19525960921b6044820152606401610359565b80600260008281526020819052604090206001015460ff166002811115610bd757634e487b7160e01b600052602160045260246000fd5b14610bf45760405162461bcd60e51b8152600401610359906112df565b81610bff8133610abd565b610c1b5760405162461bcd60e51b81526004016103599061132b565b6000838152602081905260409020610c369060030133610f80565b6040513390819085907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af90600090a4505050565b600081600160008281526020819052604090206001015460ff166002811115610ca357634e487b7160e01b600052602160045260246000fd5b14610cc05760405162461bcd60e51b815260040161035990611290565b6000838152602081905260409020600201546001600160a01b03165b9392505050565b81600160008281526020819052604090206001015460ff166002811115610d1a57634e487b7160e01b600052602160045260246000fd5b14610d375760405162461bcd60e51b815260040161035990611290565b6000838152602081905260409020548390610d529033610abd565b610d6e5760405162461bcd60e51b81526004016103599061136d565b6000848152602081905260409020610d89906002018461101d565b60405133906001600160a01b0385169086907f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e74690600090a450505050565b60018181548110610dd757600080fd5b6000918252602090912001546001600160a01b0316905081565b600060016001600160a01b03831660009081526002602052604090205460ff166001811115610e3057634e487b7160e01b600052602160045260246000fd5b1492915050565b61036c828261101d565b60005b8151811015610e9057610e7e83838381518110610e7157634e487b7160e01b600052603260045260246000fd5b6020026020010151610fa2565b80610e88816113e0565b915050610e44565b505050565b610e9f8282610a26565b15610eec5760405162461bcd60e51b815260206004820152601e60248201527f43616e206f6e6c792072656769737465722061207061727479206f6e636500006044820152606401610359565b6001600160a01b038281166000818152600360209081526040808320805460018082018355828652848620820180546001600160a01b031916988a169889179055878652909101909252808320829055519093917f4b920dd33e12e37712086438f2afcecb921cefe83b717ca990222f53d7e2845491a3505050565b6000610cdc82846113c9565b6000610cdc82846113b1565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6001600160a01b038116610ff85760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152606401610359565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6001600160a01b03811661107f5760405162461bcd60e51b815260206004820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152608401610359565b81546001600160a01b0319166001600160a01b0391909116179055565b80356001600160a01b03811681146110b357600080fd5b919050565b6000602082840312156110c9578081fd5b610cdc8261109c565b600080604083850312156110e4578081fd5b6110ed8361109c565b91506110fb6020840161109c565b90509250929050565b600080600060408486031215611118578081fd5b833567ffffffffffffffff8082111561112f578283fd5b818601915086601f830112611142578283fd5b813581811115611150578384fd5b8760208260051b8501011115611164578384fd5b60209283019550935061117a918601905061109c565b90509250925092565b600060208284031215611194578081fd5b5035919050565b600080604083850312156111ad578182fd5b823591506110fb6020840161109c565b60208082528181018390526000908460408401835b868110156111fe576001600160a01b036111eb8461109c565b16825291830191908301906001016111d2565b509695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561124a5783516001600160a01b031683529284019291840191600101611225565b50909695505050505050565b604081016002841061127857634e487b7160e01b600052602160045260246000fd5b9281526001600160801b039190911660209091015290565b6020808252602f908201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460408201526e204578636c757369766520726f6c6560881b606082015260800190565b6020808252602c908201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460408201526b2053686172656420726f6c6560a01b606082015260800190565b60208082526022908201527f53656e64657220646f6573206e6f7420686f6c6420726571756972656420726f6040820152616c6560f01b606082015260800190565b60208082526024908201527f43616e206f6e6c792062652063616c6c6564206279206120726f6c65206d616e60408201526330b3b2b960e11b606082015260800190565b600082198211156113c4576113c46113fb565b500190565b6000828210156113db576113db6113fb565b500390565b60006000198214156113f4576113f46113fb565b5060010190565b634e487b7160e01b600052601160045260246000fdfea264697066735822122084c07b7cc39b8795539abfdc7c40b7a7bf8d0fdb23afba4febbd0a75f46907ec64736f6c63430008040033417474656d7074656420746f2075736520616e20696e76616c696420726f6c65",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Maintains a whitelist of financial contract creators that are allowed to register new financial contracts and stores party members of a financial contract.",
    "kind": "dev",
    "methods": {
      "addMember(uint256,address)": {
        "details": "Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.",
        "params": {
          "newMember": "the new SharedRole member.",
          "roleId": "the SharedRole membership to modify."
        }
      },
      "addPartyToContract(address)": {
        "details": "msg.sender will be used to determine the contract that this party is added to.",
        "params": {
          "party": "new party for the calling contract."
        }
      },
      "getAllRegisteredContracts()": {
        "returns": {
          "_0": "all registered contract addresses within the system."
        }
      },
      "getMember(uint256)": {
        "details": "Reverts if `roleId` does not represent an initialized, exclusive role.",
        "params": {
          "roleId": "the ExclusiveRole membership to check."
        },
        "returns": {
          "_0": "the address of the current ExclusiveRole member."
        }
      },
      "getRegisteredContracts(address)": {
        "params": {
          "party": "address of the party."
        },
        "returns": {
          "_0": "an array of the contracts the party is registered to."
        }
      },
      "holdsRole(uint256,address)": {
        "details": "Reverts if roleId does not correspond to an initialized role.",
        "params": {
          "memberToCheck": "the address to check.",
          "roleId": "the Role to check."
        },
        "returns": {
          "_0": "True if `memberToCheck` is a member of `roleId`."
        }
      },
      "isContractRegistered(address)": {
        "details": "If it is registered, it is an authorized participant in the UMA system.",
        "params": {
          "contractAddress": "address of the financial contract."
        },
        "returns": {
          "_0": "bool indicates whether the contract is registered."
        }
      },
      "isPartyMemberOfContract(address,address)": {
        "params": {
          "contractAddress": "address to check against the party.",
          "party": "party to check."
        },
        "returns": {
          "_0": "bool indicating if the address is a party of the contract."
        }
      },
      "registerContract(address[],address)": {
        "details": "Only authorized contract creators can call this method.",
        "params": {
          "contractAddress": "address of the contract against which the parties are registered.",
          "parties": "array of addresses who become parties in the contract."
        }
      },
      "removeMember(uint256,address)": {
        "details": "Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.",
        "params": {
          "memberToRemove": "the current SharedRole member to remove.",
          "roleId": "the SharedRole membership to modify."
        }
      },
      "removePartyFromContract(address)": {
        "details": "msg.sender will be used to determine the contract that this party is removed from.",
        "params": {
          "partyAddress": "address to be removed from the calling contract."
        }
      },
      "renounceMembership(uint256)": {
        "details": "Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.",
        "params": {
          "roleId": "the SharedRole membership to modify."
        }
      },
      "resetMember(uint256,address)": {
        "details": "Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.",
        "params": {
          "newMember": "the new ExclusiveRole member.",
          "roleId": "the ExclusiveRole membership to modify."
        }
      }
    },
    "title": "Registry for financial contracts and approved financial contract creators.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMember(uint256,address)": {
        "notice": "Adds `newMember` to the shared role, `roleId`."
      },
      "addPartyToContract(address)": {
        "notice": "Adds a party member to the calling contract."
      },
      "constructor": {
        "notice": "Construct the Registry contract."
      },
      "getAllRegisteredContracts()": {
        "notice": "Returns all registered contracts."
      },
      "getMember(uint256)": {
        "notice": "Gets the current holder of the exclusive role, `roleId`."
      },
      "getRegisteredContracts(address)": {
        "notice": "Returns a list of all contracts that are associated with a particular party."
      },
      "holdsRole(uint256,address)": {
        "notice": "Whether `memberToCheck` is a member of roleId."
      },
      "isContractRegistered(address)": {
        "notice": "Returns whether the contract has been registered with the registry."
      },
      "isPartyMemberOfContract(address,address)": {
        "notice": "checks if an address is a party of a contract."
      },
      "registerContract(address[],address)": {
        "notice": "Registers a new financial contract."
      },
      "removeMember(uint256,address)": {
        "notice": "Removes `memberToRemove` from the shared role, `roleId`."
      },
      "removePartyFromContract(address)": {
        "notice": "Removes a party member from the calling contract."
      },
      "renounceMembership(uint256)": {
        "notice": "Removes caller from the role, `roleId`."
      },
      "resetMember(uint256,address)": {
        "notice": "Changes the exclusive role holder of `roleId` to `newMember`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10242,
        "contract": "contracts/oracle/implementation/Registry.sol:Registry",
        "label": "roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Role)10237_storage)"
      },
      {
        "astId": 27854,
        "contract": "contracts/oracle/implementation/Registry.sol:Registry",
        "label": "registeredContracts",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 27859,
        "contract": "contracts/oracle/implementation/Registry.sol:Registry",
        "label": "contractMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(FinancialContract)27843_storage)"
      },
      {
        "astId": 27864,
        "contract": "contracts/oracle/implementation/Registry.sol:Registry",
        "label": "partyMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Party)27851_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(RoleType)10225": {
        "encoding": "inplace",
        "label": "enum MultiRole.RoleType",
        "numberOfBytes": "1"
      },
      "t_enum(Validity)27837": {
        "encoding": "inplace",
        "label": "enum Registry.Validity",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(FinancialContract)27843_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Registry.FinancialContract)",
        "numberOfBytes": "32",
        "value": "t_struct(FinancialContract)27843_storage"
      },
      "t_mapping(t_address,t_struct(Party)27851_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Registry.Party)",
        "numberOfBytes": "32",
        "value": "t_struct(Party)27851_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Role)10237_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MultiRole.Role)",
        "numberOfBytes": "32",
        "value": "t_struct(Role)10237_storage"
      },
      "t_struct(FinancialContract)27843_storage": {
        "encoding": "inplace",
        "label": "struct Registry.FinancialContract",
        "members": [
          {
            "astId": 27840,
            "contract": "contracts/oracle/implementation/Registry.sol:Registry",
            "label": "valid",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Validity)27837"
          },
          {
            "astId": 27842,
            "contract": "contracts/oracle/implementation/Registry.sol:Registry",
            "label": "index",
            "offset": 1,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Party)27851_storage": {
        "encoding": "inplace",
        "label": "struct Registry.Party",
        "members": [
          {
            "astId": 27846,
            "contract": "contracts/oracle/implementation/Registry.sol:Registry",
            "label": "contracts",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 27850,
            "contract": "contracts/oracle/implementation/Registry.sol:Registry",
            "label": "contractIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Role)10237_storage": {
        "encoding": "inplace",
        "label": "struct MultiRole.Role",
        "members": [
          {
            "astId": 10227,
            "contract": "contracts/oracle/implementation/Registry.sol:Registry",
            "label": "managingRole",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10230,
            "contract": "contracts/oracle/implementation/Registry.sol:Registry",
            "label": "roleType",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(RoleType)10225"
          },
          {
            "astId": 10233,
            "contract": "contracts/oracle/implementation/Registry.sol:Registry",
            "label": "exclusiveRoleMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(RoleMembership)10048_storage"
          },
          {
            "astId": 10236,
            "contract": "contracts/oracle/implementation/Registry.sol:Registry",
            "label": "sharedRoleMembership",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(RoleMembership)10121_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleMembership)10048_storage": {
        "encoding": "inplace",
        "label": "struct Exclusive.RoleMembership",
        "members": [
          {
            "astId": 10047,
            "contract": "contracts/oracle/implementation/Registry.sol:Registry",
            "label": "member",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleMembership)10121_storage": {
        "encoding": "inplace",
        "label": "struct Shared.RoleMembership",
        "members": [
          {
            "astId": 10120,
            "contract": "contracts/oracle/implementation/Registry.sol:Registry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}