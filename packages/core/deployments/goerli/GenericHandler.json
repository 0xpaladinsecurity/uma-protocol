{
  "address": "0x20e2Bf3422290CbadcE3289aD3f317Ae9E80636D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "initialResourceIDs",
          "type": "bytes32[]"
        },
        {
          "internalType": "address[]",
          "name": "initialContractAddresses",
          "type": "address[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "initialDepositFunctionSignatures",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes4[]",
          "name": "initialExecuteFunctionSignatures",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "_bridgeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_contractAddressToDepositFunctionSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_contractAddressToExecuteFunctionSignature",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_contractAddressToResourceID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_contractWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "_depositRecords",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "_destinationChainID",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_depositer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_resourceID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_metaData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "_resourceIDToContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "resourceID",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "destinationChainID",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "depositNonce",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "depositer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "resourceID",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "depositNonce",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "destId",
          "type": "uint8"
        }
      ],
      "name": "getDepositRecord",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "_destinationChainID",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "_depositer",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "_resourceID",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "_metaData",
              "type": "bytes"
            }
          ],
          "internalType": "struct GenericHandler.DepositRecord",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "resourceID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "depositFunctionSig",
          "type": "bytes4"
        },
        {
          "internalType": "bytes4",
          "name": "executeFunctionSig",
          "type": "bytes4"
        }
      ],
      "name": "setResource",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2551256d705a1c76ee17749eb6519e412188da4ee4877b838436165ffa74b91c",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0x20e2Bf3422290CbadcE3289aD3f317Ae9E80636D",
    "transactionIndex": 24,
    "gasUsed": "853479",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7199fe6ded99865fabc1b94433c12975acd6ade084a35deb9e7a9a06a0d65b9b",
    "transactionHash": "0x2551256d705a1c76ee17749eb6519e412188da4ee4877b838436165ffa74b91c",
    "logs": [],
    "blockNumber": 4746607,
    "cumulativeGasUsed": "3541219",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x54e38A62ED3dC88e2B80cBA50deB940580511D26",
    [],
    [],
    [],
    []
  ],
  "solcInputHash": "87af3bddb96fa5cfcfc99d0e6fd39498",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"initialResourceIDs\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"initialContractAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"initialDepositFunctionSignatures\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"initialExecuteFunctionSignatures\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_bridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_contractAddressToDepositFunctionSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_contractAddressToExecuteFunctionSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_contractAddressToResourceID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_contractWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"_depositRecords\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"_destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_depositer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_metaData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_resourceIDToContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"depositNonce\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"destId\",\"type\":\"uint8\"}],\"name\":\"getDepositRecord\",\"outputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"_destinationChainID\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_depositer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_metaData\",\"type\":\"bytes\"}],\"internalType\":\"struct GenericHandler.DepositRecord\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"resourceID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"depositFunctionSig\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"executeFunctionSig\",\"type\":\"bytes4\"}],\"name\":\"setResource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"ChainSafe Systems.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"{initialResourceIDs}, {initialContractAddresses}, {initialDepositFunctionSignatures}, and {initialExecuteFunctionSignatures} must all have the same length. Also, values must be ordered in the way that that index x of any mentioned array must be intended for value x of any other array, e.g. {initialContractAddresses}[0] is the intended address for {initialDepositFunctionSignatures}[0].\",\"params\":{\"bridgeAddress\":\"Contract address of previously deployed Bridge.\",\"initialContractAddresses\":\"These are the addresses the {initialResourceIDs} will point to, and are the contracts that will be called to perform deposit and execution calls.\",\"initialDepositFunctionSignatures\":\"These are the function signatures {initialContractAddresses} will point to, and are the function that will be called when executing {deposit}\",\"initialExecuteFunctionSignatures\":\"These are the function signatures {initialContractAddresses} will point to, and are the function that will be called when executing {executeProposal}\",\"initialResourceIDs\":\"Resource IDs used to identify a specific contract address. These are the Resource IDs this contract will initially support.\"}},\"deposit(bytes32,uint8,uint64,address,bytes)\":{\"params\":{\"data\":\"Consists of: {resourceID}, {lenMetaData}, and {metaData} all padded to 32 bytes.\",\"depositNonce\":\"This value is generated as an ID by the Bridge contract.\",\"depositer\":\"Address of account making the deposit in the Bridge contract.\",\"destinationChainID\":\"Chain ID deposit is expected to be bridged to.\"}},\"executeProposal(bytes32,bytes)\":{\"params\":{\"data\":\"Consists of {resourceID}, {lenMetaData}, and {metaData}.\"}},\"getDepositRecord(uint64,uint8)\":{\"params\":{\"depositNonce\":\"This ID will have been generated by the Bridge contract.\",\"destId\":\"ID of chain deposit will be bridged to.\"},\"returns\":{\"_0\":\"DepositRecord which consists of: - _destinationChainID ChainID deposited tokens are intended to end up on. - _resourceID ResourceID used when {deposit} was executed. - _depositer Address that initially called {deposit} in the Bridge contract. - _metaData Data to be passed to method executed in corresponding {resourceID} contract.\"}},\"setResource(bytes32,address,bytes4,bytes4)\":{\"params\":{\"contractAddress\":\"Address of contract to be called when a deposit is made and a deposited is executed.\",\"depositFunctionSig\":\"Function signature of method to be called in {contractAddress} when a deposit is made.\",\"executeFunctionSig\":\"Function signature of method to be called in {contractAddress} when a deposit is executed.\",\"resourceID\":\"ResourceID to be used when making deposits.\"}}},\"title\":\"Handles generic deposits and deposit executions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(bytes32,uint8,uint64,address,bytes)\":{\"notice\":\"A deposit is initiatied by making a deposit in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  64 - END{contractAddress} is required to be whitelistedIf {_contractAddressToDepositFunctionSignature}[{contractAddress}] is set, {metaData} is expected to consist of needed function arguments.\"},\"executeProposal(bytes32,bytes)\":{\"notice\":\"Proposal execution should be initiated when a proposal is finalized in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  32 - END{contractAddress} is required to be whitelistedIf {_contractAddressToExecuteFunctionSignature}[{contractAddress}] is set, {metaData} is expected to consist of needed function arguments.\"},\"setResource(bytes32,address,bytes4,bytes4)\":{\"notice\":\"First verifies {_resourceIDToContractAddress}[{resourceID}] and {_contractAddressToResourceID}[{contractAddress}] are not already set, then sets {_resourceIDToContractAddress} with {contractAddress}, {_contractAddressToResourceID} with {resourceID}, {_contractAddressToDepositFunctionSignature} with {depositFunctionSig}, {_contractAddressToExecuteFunctionSignature} with {executeFunctionSig}, and {_contractWhitelist} to true for {contractAddress}.\"}},\"notice\":\"This contract is intended to be used with the Bridge contract. Copied directly from here:  https://github.com/ChainSafe/chainbridge-solidity/releases/tag/v1.0.0\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chainbridge/GenericHandler.sol\":\"GenericHandler\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":199},\"remappings\":[]},\"sources\":{\"contracts/chainbridge/GenericHandler.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"./IGenericHandler.sol\\\";\\n\\n/**\\n    @title Handles generic deposits and deposit executions.\\n    @author ChainSafe Systems.\\n    @notice This contract is intended to be used with the Bridge contract. Copied directly from here: \\n            https://github.com/ChainSafe/chainbridge-solidity/releases/tag/v1.0.0\\n */\\ncontract GenericHandler is IGenericHandler {\\n    address public _bridgeAddress;\\n\\n    struct DepositRecord {\\n        uint8 _destinationChainID;\\n        address _depositer;\\n        bytes32 _resourceID;\\n        bytes _metaData;\\n    }\\n\\n    // depositNonce => Deposit Record\\n    mapping(uint8 => mapping(uint64 => DepositRecord)) public _depositRecords;\\n\\n    // resourceID => contract address\\n    mapping(bytes32 => address) public _resourceIDToContractAddress;\\n\\n    // contract address => resourceID\\n    mapping(address => bytes32) public _contractAddressToResourceID;\\n\\n    // contract address => deposit function signature\\n    mapping(address => bytes4) public _contractAddressToDepositFunctionSignature;\\n\\n    // contract address => execute proposal function signature\\n    mapping(address => bytes4) public _contractAddressToExecuteFunctionSignature;\\n\\n    // token contract address => is whitelisted\\n    mapping(address => bool) public _contractWhitelist;\\n\\n    modifier onlyBridge() {\\n        _onlyBridge();\\n        _;\\n    }\\n\\n    function _onlyBridge() private {\\n        require(msg.sender == _bridgeAddress, \\\"sender must be bridge contract\\\");\\n    }\\n\\n    /**\\n        @param bridgeAddress Contract address of previously deployed Bridge.\\n        @param initialResourceIDs Resource IDs used to identify a specific contract address.\\n        These are the Resource IDs this contract will initially support.\\n        @param initialContractAddresses These are the addresses the {initialResourceIDs} will point to, and are the contracts that will be\\n        called to perform deposit and execution calls.\\n        @param initialDepositFunctionSignatures These are the function signatures {initialContractAddresses} will point to,\\n        and are the function that will be called when executing {deposit}\\n        @param initialExecuteFunctionSignatures These are the function signatures {initialContractAddresses} will point to,\\n        and are the function that will be called when executing {executeProposal}\\n\\n        @dev {initialResourceIDs}, {initialContractAddresses}, {initialDepositFunctionSignatures},\\n        and {initialExecuteFunctionSignatures} must all have the same length. Also,\\n        values must be ordered in the way that that index x of any mentioned array\\n        must be intended for value x of any other array, e.g. {initialContractAddresses}[0]\\n        is the intended address for {initialDepositFunctionSignatures}[0].\\n     */\\n    constructor(\\n        address bridgeAddress,\\n        bytes32[] memory initialResourceIDs,\\n        address[] memory initialContractAddresses,\\n        bytes4[] memory initialDepositFunctionSignatures,\\n        bytes4[] memory initialExecuteFunctionSignatures\\n    ) {\\n        require(\\n            initialResourceIDs.length == initialContractAddresses.length,\\n            \\\"initialResourceIDs and initialContractAddresses len mismatch\\\"\\n        );\\n\\n        require(\\n            initialContractAddresses.length == initialDepositFunctionSignatures.length,\\n            \\\"provided contract addresses and function signatures len mismatch\\\"\\n        );\\n\\n        require(\\n            initialDepositFunctionSignatures.length == initialExecuteFunctionSignatures.length,\\n            \\\"provided deposit and execute function signatures len mismatch\\\"\\n        );\\n\\n        _bridgeAddress = bridgeAddress;\\n\\n        for (uint256 i = 0; i < initialResourceIDs.length; i++) {\\n            _setResource(\\n                initialResourceIDs[i],\\n                initialContractAddresses[i],\\n                initialDepositFunctionSignatures[i],\\n                initialExecuteFunctionSignatures[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n        @param depositNonce This ID will have been generated by the Bridge contract.\\n        @param destId ID of chain deposit will be bridged to.\\n        @return DepositRecord which consists of:\\n        - _destinationChainID ChainID deposited tokens are intended to end up on.\\n        - _resourceID ResourceID used when {deposit} was executed.\\n        - _depositer Address that initially called {deposit} in the Bridge contract.\\n        - _metaData Data to be passed to method executed in corresponding {resourceID} contract.\\n    */\\n    function getDepositRecord(uint64 depositNonce, uint8 destId) external view returns (DepositRecord memory) {\\n        return _depositRecords[destId][depositNonce];\\n    }\\n\\n    /**\\n        @notice First verifies {_resourceIDToContractAddress}[{resourceID}] and\\n        {_contractAddressToResourceID}[{contractAddress}] are not already set,\\n        then sets {_resourceIDToContractAddress} with {contractAddress},\\n        {_contractAddressToResourceID} with {resourceID},\\n        {_contractAddressToDepositFunctionSignature} with {depositFunctionSig},\\n        {_contractAddressToExecuteFunctionSignature} with {executeFunctionSig},\\n        and {_contractWhitelist} to true for {contractAddress}.\\n        @param resourceID ResourceID to be used when making deposits.\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\n        @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.\\n        @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.\\n     */\\n    function setResource(\\n        bytes32 resourceID,\\n        address contractAddress,\\n        bytes4 depositFunctionSig,\\n        bytes4 executeFunctionSig\\n    ) external override onlyBridge {\\n        _setResource(resourceID, contractAddress, depositFunctionSig, executeFunctionSig);\\n    }\\n\\n    /**\\n        @notice A deposit is initiatied by making a deposit in the Bridge contract.\\n        @param destinationChainID Chain ID deposit is expected to be bridged to.\\n        @param depositNonce This value is generated as an ID by the Bridge contract.\\n        @param depositer Address of account making the deposit in the Bridge contract.\\n        @param data Consists of: {resourceID}, {lenMetaData}, and {metaData} all padded to 32 bytes.\\n        @notice Data passed into the function should be constructed as follows:\\n        len(data)                              uint256     bytes  0  - 32\\n        data                                   bytes       bytes  64 - END\\n        @notice {contractAddress} is required to be whitelisted\\n        @notice If {_contractAddressToDepositFunctionSignature}[{contractAddress}] is set,\\n        {metaData} is expected to consist of needed function arguments.\\n     */\\n    function deposit(\\n        bytes32 resourceID,\\n        uint8 destinationChainID,\\n        uint64 depositNonce,\\n        address depositer,\\n        bytes calldata data\\n    ) external onlyBridge {\\n        bytes32 lenMetadata;\\n        bytes memory metadata;\\n\\n        assembly {\\n            // Load length of metadata from data + 64\\n            lenMetadata := calldataload(0xC4)\\n            // Load free memory pointer\\n            metadata := mload(0x40)\\n\\n            mstore(0x40, add(0x20, add(metadata, lenMetadata)))\\n\\n            // func sig (4) + destinationChainId (padded to 32) + depositNonce (32) + depositor (32) +\\n            // bytes length (32) + resourceId (32) + length (32) = 0xC4\\n\\n            calldatacopy(\\n                metadata, // copy to metadata\\n                0xC4, // copy from calldata after metadata length declaration @0xC4\\n                sub(calldatasize(), 0xC4) // copy size (calldatasize - (0xC4 + the space metaData takes up))\\n            )\\n        }\\n\\n        address contractAddress = _resourceIDToContractAddress[resourceID];\\n        require(_contractWhitelist[contractAddress], \\\"provided contractAddress is not whitelisted\\\");\\n\\n        bytes4 sig = _contractAddressToDepositFunctionSignature[contractAddress];\\n        if (sig != bytes4(0)) {\\n            bytes memory callData = abi.encodePacked(sig, metadata);\\n            (bool success, ) = contractAddress.call(callData);\\n            require(success, \\\"delegatecall to contractAddress failed\\\");\\n        }\\n\\n        _depositRecords[destinationChainID][depositNonce] = DepositRecord(\\n            destinationChainID,\\n            depositer,\\n            resourceID,\\n            metadata\\n        );\\n    }\\n\\n    /**\\n        @notice Proposal execution should be initiated when a proposal is finalized in the Bridge contract.\\n        @param data Consists of {resourceID}, {lenMetaData}, and {metaData}.\\n        @notice Data passed into the function should be constructed as follows:\\n        len(data)                              uint256     bytes  0  - 32\\n        data                                   bytes       bytes  32 - END\\n        @notice {contractAddress} is required to be whitelisted\\n        @notice If {_contractAddressToExecuteFunctionSignature}[{contractAddress}] is set,\\n        {metaData} is expected to consist of needed function arguments.\\n     */\\n    function executeProposal(bytes32 resourceID, bytes calldata data) external onlyBridge {\\n        bytes memory metaData;\\n        assembly {\\n            // metadata has variable length\\n            // load free memory pointer to store metadata\\n            metaData := mload(0x40)\\n            // first 32 bytes of variable length in storage refer to length\\n            let lenMeta := calldataload(0x64)\\n            mstore(0x40, add(0x60, add(metaData, lenMeta)))\\n\\n            // in the calldata, metadata is stored @0x64 after accounting for function signature, and 2 previous params\\n            calldatacopy(\\n                metaData, // copy to metaData\\n                0x64, // copy from calldata after data length declaration at 0x64\\n                sub(calldatasize(), 0x64) // copy size (calldatasize - 0x64)\\n            )\\n        }\\n\\n        address contractAddress = _resourceIDToContractAddress[resourceID];\\n        require(_contractWhitelist[contractAddress], \\\"provided contractAddress is not whitelisted\\\");\\n\\n        bytes4 sig = _contractAddressToExecuteFunctionSignature[contractAddress];\\n        if (sig != bytes4(0)) {\\n            bytes memory callData = abi.encodePacked(sig, metaData);\\n            (bool success, ) = contractAddress.call(callData);\\n            require(success, \\\"delegatecall to contractAddress failed\\\");\\n        }\\n    }\\n\\n    function _setResource(\\n        bytes32 resourceID,\\n        address contractAddress,\\n        bytes4 depositFunctionSig,\\n        bytes4 executeFunctionSig\\n    ) internal {\\n        _resourceIDToContractAddress[resourceID] = contractAddress;\\n        _contractAddressToResourceID[contractAddress] = resourceID;\\n        _contractAddressToDepositFunctionSignature[contractAddress] = depositFunctionSig;\\n        _contractAddressToExecuteFunctionSignature[contractAddress] = executeFunctionSig;\\n\\n        _contractWhitelist[contractAddress] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xcb4d4369fb9f13271769b93666075a0b0de06977c4fa1ffdecac0ad9e0235711\",\"license\":\"AGPL-3.0-only\"},\"contracts/chainbridge/IGenericHandler.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n    @title Interface for handler that handles generic deposits and deposit executions.\\n    @dev Copied directly from here: https://github.com/ChainSafe/chainbridge-solidity/releases/tag/v1.0.0.\\n    @author ChainSafe Systems.\\n */\\ninterface IGenericHandler {\\n    /**\\n        @notice Correlates {resourceID} with {contractAddress}, {depositFunctionSig}, and {executeFunctionSig}.\\n        @param resourceID ResourceID to be used when making deposits.\\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\\n        @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.\\n        @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.\\n     */\\n    function setResource(\\n        bytes32 resourceID,\\n        address contractAddress,\\n        bytes4 depositFunctionSig,\\n        bytes4 executeFunctionSig\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1f3932a12cb48b423ffb3d1a79a5869293991599e7c4be7eb3294aeb9b632d43\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620013a1380380620013a1833981016040819052620000349162000438565b8251845114620000b15760405162461bcd60e51b815260206004820152603c60248201527f696e697469616c5265736f7572636549447320616e6420696e697469616c436f60448201527f6e7472616374416464726573736573206c656e206d69736d617463680000000060648201526084015b60405180910390fd5b81518351146200012c576040805162461bcd60e51b81526020600482015260248101919091527f70726f766964656420636f6e74726163742061646472657373657320616e642060448201527f66756e6374696f6e207369676e617475726573206c656e206d69736d617463686064820152608401620000a8565b8051825114620001a55760405162461bcd60e51b815260206004820152603d60248201527f70726f7669646564206465706f73697420616e6420657865637574652066756e60448201527f6374696f6e207369676e617475726573206c656e206d69736d617463680000006064820152608401620000a8565b600080546001600160a01b0319166001600160a01b0387161781555b845181101562000294576200027f858281518110620001f057634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106200021957634e487b7160e01b600052603260045260246000fd5b60200260200101518584815181106200024257634e487b7160e01b600052603260045260246000fd5b60200260200101518585815181106200026b57634e487b7160e01b600052603260045260246000fd5b6020026020010151620002a060201b60201c565b806200028b81620005bb565b915050620001c1565b505050505050620005f9565b600084815260026020908152604080832080546001600160a01b039097166001600160a01b031990971687179055948252600381528482209590955560048552838120805460e094851c63ffffffff19918216179091556005865284822080549390941c92169190911790915560069092529020805460ff19166001179055565b80516001600160a01b03811681146200033957600080fd5b919050565b600082601f8301126200034f578081fd5b8151602062000368620003628362000595565b62000562565b80838252828201915082860187848660051b890101111562000388578586fd5b855b85811015620003b1576200039e8262000321565b845292840192908401906001016200038a565b5090979650505050505050565b600082601f830112620003cf578081fd5b81516020620003e2620003628362000595565b80838252828201915082860187848660051b890101111562000402578586fd5b855b85811015620003b15781516001600160e01b03198116811462000425578788fd5b8452928401929084019060010162000404565b600080600080600060a0868803121562000450578081fd5b6200045b8662000321565b602087810151919650906001600160401b03808211156200047a578384fd5b818901915089601f8301126200048e578384fd5b81516200049f620003628262000595565b8082825285820191508585018d878560051b8801011115620004bf578788fd5b8795505b83861015620004e3578051835260019590950194918601918601620004c3565b5060408c01519099509450505080831115620004fd578384fd5b6200050b8a848b016200033e565b9550606089015192508083111562000521578384fd5b6200052f8a848b01620003be565b9450608089015192508083111562000545578384fd5b50506200055588828901620003be565b9150509295509295909350565b604051601f8201601f191681016001600160401b03811182821017156200058d576200058d620005e3565b604052919050565b60006001600160401b03821115620005b157620005b1620005e3565b5060051b60200190565b6000600019821415620005dc57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b610d9880620006096000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063ba484c0911610071578063ba484c0914610185578063bba8185a146101a5578063c54c2a11146101b8578063cb624463146101e1578063e248cff214610204578063ec97d3b41461021757600080fd5b8063318c136e146100ae57806338995da9146100de5780634402027f146100f35780637f79bea814610116578063a5c3a98514610149575b600080fd5b6000546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f16100ec366004610a93565b610245565b005b610106610101366004610b42565b61047b565b6040516100d59493929190610cc1565b6101396101243660046109c4565b60066020526000908152604090205460ff1681565b60405190151581526020016100d5565b61016c6101573660046109c4565b60056020526000908152604090205460e01b81565b6040516001600160e01b031990911681526020016100d5565b610198610193366004610b10565b610542565b6040516100d59190610c75565b6100f16101b33660046109fd565b61065d565b6100c16101c63660046109e5565b6002602052600090815260409020546001600160a01b031681565b61016c6101ef3660046109c4565b60046020526000908152604090205460e01b81565b6100f1610212366004610a49565b6106ea565b6102376102253660046109c4565b60036020526000908152604090205481565b6040519081526020016100d5565b61024d61082b565b6000606060c4359150604051905081810160200160405260c4360360c482376000888152600260209081526040808320546001600160a01b031680845260069092529091205460ff166102bb5760405162461bcd60e51b81526004016102b290610c2a565b60405180910390fd5b6001600160a01b03811660009081526004602052604090205460e01b6001600160e01b031981161561038d57600081846040516020016102fc929190610b97565b60405160208183030381529060405290506000836001600160a01b0316826040516103279190610bc8565b6000604051808303816000865af19150503d8060008114610364576040519150601f19603f3d011682016040523d82523d6000602084013e610369565b606091505b505090508061038a5760405162461bcd60e51b81526004016102b290610be4565b50505b60405180608001604052808a60ff168152602001886001600160a01b031681526020018b815260200184815250600160008b60ff1660ff16815260200190815260200160002060008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010155606082015181600201908051906020019061046c929190610887565b50505050505050505050505050565b6001602081815260009384526040808520909152918352912080549181015460028201805460ff85169461010090046001600160a01b03169391906104bf90610d27565b80601f01602080910402602001604051908101604052809291908181526020018280546104eb90610d27565b80156105385780601f1061050d57610100808354040283529160200191610538565b820191906000526020600020905b81548152906001019060200180831161051b57829003601f168201915b5050505050905084565b604080516080810182526000808252602082018190529181019190915260608082015260ff828116600090815260016020818152604080842067ffffffffffffffff891685528252928390208351608081018552815495861681526101009095046001600160a01b03169185019190915290810154918301919091526002810180546060840191906105d390610d27565b80601f01602080910402602001604051908101604052809291908181526020018280546105ff90610d27565b801561064c5780601f106106215761010080835404028352916020019161064c565b820191906000526020600020905b81548152906001019060200180831161062f57829003601f168201915b505050505081525050905092915050565b61066561082b565b600084815260026020908152604080832080546001600160a01b0388166001600160a01b0319909116811790915583526003825280832087905560048252808320805460e087811c63ffffffff19928316179092556005845282852080549287901c9290911691909117905560069091529020805460ff191660011790555b50505050565b6106f261082b565b604080516064803582016060019092529060631936019082376000848152600260209081526040808320546001600160a01b031680845260069092529091205460ff166107515760405162461bcd60e51b81526004016102b290610c2a565b6001600160a01b03811660009081526005602052604090205460e01b6001600160e01b03198116156108235760008184604051602001610792929190610b97565b60405160208183030381529060405290506000836001600160a01b0316826040516107bd9190610bc8565b6000604051808303816000865af19150503d80600081146107fa576040519150601f19603f3d011682016040523d82523d6000602084013e6107ff565b606091505b50509050806108205760405162461bcd60e51b81526004016102b290610be4565b50505b505050505050565b6000546001600160a01b031633146108855760405162461bcd60e51b815260206004820152601e60248201527f73656e646572206d7573742062652062726964676520636f6e7472616374000060448201526064016102b2565b565b82805461089390610d27565b90600052602060002090601f0160209004810192826108b557600085556108fb565b82601f106108ce57805160ff19168380011785556108fb565b828001600101855582156108fb579182015b828111156108fb5782518255916020019190600101906108e0565b5061090792915061090b565b5090565b5b80821115610907576000815560010161090c565b80356001600160a01b038116811461093757600080fd5b919050565b80356001600160e01b03198116811461093757600080fd5b60008083601f840112610965578182fd5b50813567ffffffffffffffff81111561097c578182fd5b60208301915083602082850101111561099457600080fd5b9250929050565b803567ffffffffffffffff8116811461093757600080fd5b803560ff8116811461093757600080fd5b6000602082840312156109d5578081fd5b6109de82610920565b9392505050565b6000602082840312156109f6578081fd5b5035919050565b60008060008060808587031215610a12578283fd5b84359350610a2260208601610920565b9250610a306040860161093c565b9150610a3e6060860161093c565b905092959194509250565b600080600060408486031215610a5d578283fd5b83359250602084013567ffffffffffffffff811115610a7a578283fd5b610a8686828701610954565b9497909650939450505050565b60008060008060008060a08789031215610aab578182fd5b86359550610abb602088016109b3565b9450610ac96040880161099b565b9350610ad760608801610920565b9250608087013567ffffffffffffffff811115610af2578283fd5b610afe89828a01610954565b979a9699509497509295939492505050565b60008060408385031215610b22578182fd5b610b2b8361099b565b9150610b39602084016109b3565b90509250929050565b60008060408385031215610b54578182fd5b610b5d836109b3565b9150610b396020840161099b565b60008151808452610b83816020860160208601610cfb565b601f01601f19169290920160200192915050565b6001600160e01b0319831681528151600090610bba816004850160208701610cfb565b919091016004019392505050565b60008251610bda818460208701610cfb565b9190910192915050565b60208082526026908201527f64656c656761746563616c6c20746f20636f6e7472616374416464726573732060408201526519985a5b195960d21b606082015260800190565b6020808252602b908201527f70726f766964656420636f6e747261637441646472657373206973206e6f742060408201526a1dda1a5d195b1a5cdd195960aa1b606082015260800190565b6020815260ff825116602082015260018060a01b0360208301511660408201526040820151606082015260006060830151608080840152610cb960a0840182610b6b565b949350505050565b60ff8516815260018060a01b0384166020820152826040820152608060608201526000610cf16080830184610b6b565b9695505050505050565b60005b83811015610d16578181015183820152602001610cfe565b838111156106e45750506000910152565b600181811c90821680610d3b57607f821691505b60208210811415610d5c57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220327d3353ef488ee4a51c9667624852d5744a25e98bbe6078dbe8f5fe89f159ff64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063ba484c0911610071578063ba484c0914610185578063bba8185a146101a5578063c54c2a11146101b8578063cb624463146101e1578063e248cff214610204578063ec97d3b41461021757600080fd5b8063318c136e146100ae57806338995da9146100de5780634402027f146100f35780637f79bea814610116578063a5c3a98514610149575b600080fd5b6000546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f16100ec366004610a93565b610245565b005b610106610101366004610b42565b61047b565b6040516100d59493929190610cc1565b6101396101243660046109c4565b60066020526000908152604090205460ff1681565b60405190151581526020016100d5565b61016c6101573660046109c4565b60056020526000908152604090205460e01b81565b6040516001600160e01b031990911681526020016100d5565b610198610193366004610b10565b610542565b6040516100d59190610c75565b6100f16101b33660046109fd565b61065d565b6100c16101c63660046109e5565b6002602052600090815260409020546001600160a01b031681565b61016c6101ef3660046109c4565b60046020526000908152604090205460e01b81565b6100f1610212366004610a49565b6106ea565b6102376102253660046109c4565b60036020526000908152604090205481565b6040519081526020016100d5565b61024d61082b565b6000606060c4359150604051905081810160200160405260c4360360c482376000888152600260209081526040808320546001600160a01b031680845260069092529091205460ff166102bb5760405162461bcd60e51b81526004016102b290610c2a565b60405180910390fd5b6001600160a01b03811660009081526004602052604090205460e01b6001600160e01b031981161561038d57600081846040516020016102fc929190610b97565b60405160208183030381529060405290506000836001600160a01b0316826040516103279190610bc8565b6000604051808303816000865af19150503d8060008114610364576040519150601f19603f3d011682016040523d82523d6000602084013e610369565b606091505b505090508061038a5760405162461bcd60e51b81526004016102b290610be4565b50505b60405180608001604052808a60ff168152602001886001600160a01b031681526020018b815260200184815250600160008b60ff1660ff16815260200190815260200160002060008a67ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160010155606082015181600201908051906020019061046c929190610887565b50505050505050505050505050565b6001602081815260009384526040808520909152918352912080549181015460028201805460ff85169461010090046001600160a01b03169391906104bf90610d27565b80601f01602080910402602001604051908101604052809291908181526020018280546104eb90610d27565b80156105385780601f1061050d57610100808354040283529160200191610538565b820191906000526020600020905b81548152906001019060200180831161051b57829003601f168201915b5050505050905084565b604080516080810182526000808252602082018190529181019190915260608082015260ff828116600090815260016020818152604080842067ffffffffffffffff891685528252928390208351608081018552815495861681526101009095046001600160a01b03169185019190915290810154918301919091526002810180546060840191906105d390610d27565b80601f01602080910402602001604051908101604052809291908181526020018280546105ff90610d27565b801561064c5780601f106106215761010080835404028352916020019161064c565b820191906000526020600020905b81548152906001019060200180831161062f57829003601f168201915b505050505081525050905092915050565b61066561082b565b600084815260026020908152604080832080546001600160a01b0388166001600160a01b0319909116811790915583526003825280832087905560048252808320805460e087811c63ffffffff19928316179092556005845282852080549287901c9290911691909117905560069091529020805460ff191660011790555b50505050565b6106f261082b565b604080516064803582016060019092529060631936019082376000848152600260209081526040808320546001600160a01b031680845260069092529091205460ff166107515760405162461bcd60e51b81526004016102b290610c2a565b6001600160a01b03811660009081526005602052604090205460e01b6001600160e01b03198116156108235760008184604051602001610792929190610b97565b60405160208183030381529060405290506000836001600160a01b0316826040516107bd9190610bc8565b6000604051808303816000865af19150503d80600081146107fa576040519150601f19603f3d011682016040523d82523d6000602084013e6107ff565b606091505b50509050806108205760405162461bcd60e51b81526004016102b290610be4565b50505b505050505050565b6000546001600160a01b031633146108855760405162461bcd60e51b815260206004820152601e60248201527f73656e646572206d7573742062652062726964676520636f6e7472616374000060448201526064016102b2565b565b82805461089390610d27565b90600052602060002090601f0160209004810192826108b557600085556108fb565b82601f106108ce57805160ff19168380011785556108fb565b828001600101855582156108fb579182015b828111156108fb5782518255916020019190600101906108e0565b5061090792915061090b565b5090565b5b80821115610907576000815560010161090c565b80356001600160a01b038116811461093757600080fd5b919050565b80356001600160e01b03198116811461093757600080fd5b60008083601f840112610965578182fd5b50813567ffffffffffffffff81111561097c578182fd5b60208301915083602082850101111561099457600080fd5b9250929050565b803567ffffffffffffffff8116811461093757600080fd5b803560ff8116811461093757600080fd5b6000602082840312156109d5578081fd5b6109de82610920565b9392505050565b6000602082840312156109f6578081fd5b5035919050565b60008060008060808587031215610a12578283fd5b84359350610a2260208601610920565b9250610a306040860161093c565b9150610a3e6060860161093c565b905092959194509250565b600080600060408486031215610a5d578283fd5b83359250602084013567ffffffffffffffff811115610a7a578283fd5b610a8686828701610954565b9497909650939450505050565b60008060008060008060a08789031215610aab578182fd5b86359550610abb602088016109b3565b9450610ac96040880161099b565b9350610ad760608801610920565b9250608087013567ffffffffffffffff811115610af2578283fd5b610afe89828a01610954565b979a9699509497509295939492505050565b60008060408385031215610b22578182fd5b610b2b8361099b565b9150610b39602084016109b3565b90509250929050565b60008060408385031215610b54578182fd5b610b5d836109b3565b9150610b396020840161099b565b60008151808452610b83816020860160208601610cfb565b601f01601f19169290920160200192915050565b6001600160e01b0319831681528151600090610bba816004850160208701610cfb565b919091016004019392505050565b60008251610bda818460208701610cfb565b9190910192915050565b60208082526026908201527f64656c656761746563616c6c20746f20636f6e7472616374416464726573732060408201526519985a5b195960d21b606082015260800190565b6020808252602b908201527f70726f766964656420636f6e747261637441646472657373206973206e6f742060408201526a1dda1a5d195b1a5cdd195960aa1b606082015260800190565b6020815260ff825116602082015260018060a01b0360208301511660408201526040820151606082015260006060830151608080840152610cb960a0840182610b6b565b949350505050565b60ff8516815260018060a01b0384166020820152826040820152608060608201526000610cf16080830184610b6b565b9695505050505050565b60005b83811015610d16578181015183820152602001610cfe565b838111156106e45750506000910152565b600181811c90821680610d3b57607f821691505b60208210811415610d5c57634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220327d3353ef488ee4a51c9667624852d5744a25e98bbe6078dbe8f5fe89f159ff64736f6c63430008040033",
  "devdoc": {
    "author": "ChainSafe Systems.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "{initialResourceIDs}, {initialContractAddresses}, {initialDepositFunctionSignatures}, and {initialExecuteFunctionSignatures} must all have the same length. Also, values must be ordered in the way that that index x of any mentioned array must be intended for value x of any other array, e.g. {initialContractAddresses}[0] is the intended address for {initialDepositFunctionSignatures}[0].",
        "params": {
          "bridgeAddress": "Contract address of previously deployed Bridge.",
          "initialContractAddresses": "These are the addresses the {initialResourceIDs} will point to, and are the contracts that will be called to perform deposit and execution calls.",
          "initialDepositFunctionSignatures": "These are the function signatures {initialContractAddresses} will point to, and are the function that will be called when executing {deposit}",
          "initialExecuteFunctionSignatures": "These are the function signatures {initialContractAddresses} will point to, and are the function that will be called when executing {executeProposal}",
          "initialResourceIDs": "Resource IDs used to identify a specific contract address. These are the Resource IDs this contract will initially support."
        }
      },
      "deposit(bytes32,uint8,uint64,address,bytes)": {
        "params": {
          "data": "Consists of: {resourceID}, {lenMetaData}, and {metaData} all padded to 32 bytes.",
          "depositNonce": "This value is generated as an ID by the Bridge contract.",
          "depositer": "Address of account making the deposit in the Bridge contract.",
          "destinationChainID": "Chain ID deposit is expected to be bridged to."
        }
      },
      "executeProposal(bytes32,bytes)": {
        "params": {
          "data": "Consists of {resourceID}, {lenMetaData}, and {metaData}."
        }
      },
      "getDepositRecord(uint64,uint8)": {
        "params": {
          "depositNonce": "This ID will have been generated by the Bridge contract.",
          "destId": "ID of chain deposit will be bridged to."
        },
        "returns": {
          "_0": "DepositRecord which consists of: - _destinationChainID ChainID deposited tokens are intended to end up on. - _resourceID ResourceID used when {deposit} was executed. - _depositer Address that initially called {deposit} in the Bridge contract. - _metaData Data to be passed to method executed in corresponding {resourceID} contract."
        }
      },
      "setResource(bytes32,address,bytes4,bytes4)": {
        "params": {
          "contractAddress": "Address of contract to be called when a deposit is made and a deposited is executed.",
          "depositFunctionSig": "Function signature of method to be called in {contractAddress} when a deposit is made.",
          "executeFunctionSig": "Function signature of method to be called in {contractAddress} when a deposit is executed.",
          "resourceID": "ResourceID to be used when making deposits."
        }
      }
    },
    "title": "Handles generic deposits and deposit executions.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(bytes32,uint8,uint64,address,bytes)": {
        "notice": "A deposit is initiatied by making a deposit in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  64 - END{contractAddress} is required to be whitelistedIf {_contractAddressToDepositFunctionSignature}[{contractAddress}] is set, {metaData} is expected to consist of needed function arguments."
      },
      "executeProposal(bytes32,bytes)": {
        "notice": "Proposal execution should be initiated when a proposal is finalized in the Bridge contract.Data passed into the function should be constructed as follows: len(data)                              uint256     bytes  0  - 32 data                                   bytes       bytes  32 - END{contractAddress} is required to be whitelistedIf {_contractAddressToExecuteFunctionSignature}[{contractAddress}] is set, {metaData} is expected to consist of needed function arguments."
      },
      "setResource(bytes32,address,bytes4,bytes4)": {
        "notice": "First verifies {_resourceIDToContractAddress}[{resourceID}] and {_contractAddressToResourceID}[{contractAddress}] are not already set, then sets {_resourceIDToContractAddress} with {contractAddress}, {_contractAddressToResourceID} with {resourceID}, {_contractAddressToDepositFunctionSignature} with {depositFunctionSig}, {_contractAddressToExecuteFunctionSignature} with {executeFunctionSig}, and {_contractWhitelist} to true for {contractAddress}."
      }
    },
    "notice": "This contract is intended to be used with the Bridge contract. Copied directly from here:  https://github.com/ChainSafe/chainbridge-solidity/releases/tag/v1.0.0",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6991,
        "contract": "contracts/chainbridge/GenericHandler.sol:GenericHandler",
        "label": "_bridgeAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7007,
        "contract": "contracts/chainbridge/GenericHandler.sol:GenericHandler",
        "label": "_depositRecords",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)7000_storage))"
      },
      {
        "astId": 7011,
        "contract": "contracts/chainbridge/GenericHandler.sol:GenericHandler",
        "label": "_resourceIDToContractAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 7015,
        "contract": "contracts/chainbridge/GenericHandler.sol:GenericHandler",
        "label": "_contractAddressToResourceID",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 7019,
        "contract": "contracts/chainbridge/GenericHandler.sol:GenericHandler",
        "label": "_contractAddressToDepositFunctionSignature",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bytes4)"
      },
      {
        "astId": 7023,
        "contract": "contracts/chainbridge/GenericHandler.sol:GenericHandler",
        "label": "_contractAddressToExecuteFunctionSignature",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bytes4)"
      },
      {
        "astId": 7027,
        "contract": "contracts/chainbridge/GenericHandler.sol:GenericHandler",
        "label": "_contractWhitelist",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_bytes4)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes4)",
        "numberOfBytes": "32",
        "value": "t_bytes4"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint64,t_struct(DepositRecord)7000_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct GenericHandler.DepositRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositRecord)7000_storage"
      },
      "t_mapping(t_uint8,t_mapping(t_uint64,t_struct(DepositRecord)7000_storage))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(uint64 => struct GenericHandler.DepositRecord))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_struct(DepositRecord)7000_storage)"
      },
      "t_struct(DepositRecord)7000_storage": {
        "encoding": "inplace",
        "label": "struct GenericHandler.DepositRecord",
        "members": [
          {
            "astId": 6993,
            "contract": "contracts/chainbridge/GenericHandler.sol:GenericHandler",
            "label": "_destinationChainID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6995,
            "contract": "contracts/chainbridge/GenericHandler.sol:GenericHandler",
            "label": "_depositer",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6997,
            "contract": "contracts/chainbridge/GenericHandler.sol:GenericHandler",
            "label": "_resourceID",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 6999,
            "contract": "contracts/chainbridge/GenericHandler.sol:GenericHandler",
            "label": "_metaData",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}