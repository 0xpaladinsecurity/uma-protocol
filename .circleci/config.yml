version: 2
jobs:
  checkout_and_install:
    docker:
      - image: circleci/node:lts
    working_directory: ~/protocol
    steps:
      - checkout
      - run:
          name: Install Prereqs
          command: sudo apt-get update && sudo apt-get install -y libudev-dev libusb-1.0-0-dev yarn
      - run:
          name: Install Dependencies
          command: yarn --frozen-lockfile
      - save_cache:
          key: protocol-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/protocol
            - ~/.ssh
  build:
    docker:
      - image: circleci/node:lts
    working_directory: ~/protocol
    steps:
      - restore_cache:
          key: protocol-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run build
          command: yarn qbuild
      - save_cache:
          key: protocol-completed-build-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/protocol
            - ~/.ssh
  lint:
    docker:
      - image: circleci/node:lts
    working_directory: ~/protocol
    steps:
      - restore_cache:
          key: protocol-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Lint
          command: ./ci/lint.sh
  docs:
    docker:
      - image: circleci/node:lts
    working_directory: ~/protocol
    steps:
      - restore_cache:
          key: protocol-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install Pandoc
          command: wget https://github.com/jgm/pandoc/releases/download/2.7.3/pandoc-2.7.3-linux.tar.gz
      - run:
          name: Untar Pandoc
          command: sudo tar xvzf pandoc-2.7.3-linux.tar.gz --strip-components 1 -C /usr/local
      - run:
          name: Generate Docs
          command: ./scripts/build_docs_site.sh
      - store_artifacts:
          path: build/site
  test:
    docker:
      - image: circleci/node:lts
      - image: trufflesuite/ganache-cli
        command: ganache-cli -i 1234 -l 9000000 -p 9545
    working_directory: ~/protocol
    resource_class: large
    steps:
      - restore_cache:
          key: protocol-completed-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run tests
          # Note: this is a workaround for a strnage truffle issue.
          # The core idea is that truffle sees the absolute paths in old artifacts that are used outside of the core
          # directory and it tries to add those absolute paths to the list of sources to compile. Normally, this
          # wouldn't be an issue since those absolute paths wouldn't exist on the machine you're compiling on. However,
          # because the published core contracts are compiled in the ci env, many of these absolute paths do match in
          # this environment. This creates a very nasty situation where multiple versions of the same contracts are
          # compiled and it's non-deterministic which one will be used by truffle. To avoid this, we just change the dir
          # structure to disrupt the absolute paths. This means that truffle will not know how up-to-date the bytecode
          # is, however, so testing will require a recompile for every contract.
          command: |
            cd ..
            mkdir truffle_workaround
            mv protocol truffle_workaround/
            cd truffle_workaround/protocol
            ./scripts/lerna_packages.sh

  test_core:
    docker:
      - image: circleci/node:lts
      - image: trufflesuite/ganache-cli
        command: ganache-cli -i 1234 -l 9000000 -p 9545
    working_directory: ~/protocol
    resource_class: large
    steps:
      - restore_cache:
          key: protocol-completed-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run tests
          command: |
            ./scripts/lerna_packages.sh
            export PACKAGES_CHANGES=$(cat lerna_output | grep "core")
            if [ "$PACKAGES_CHANGES" = "@uma/core" ]; then
                yarn run test-concurrent-test;
            else
                circleci-agent step halt;
            fi
  test_liquidator:
    docker:
      - image: circleci/node:lts
      - image: trufflesuite/ganache-cli
        command: ganache-cli -i 1234 -l 9000000 -p 9545
    working_directory: ~/protocol
    resource_class: large
    steps:
      - restore_cache:
          key: protocol-completed-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run tests
          command: |
            ./scripts/lerna_packages.sh
            export PACKAGES_CHANGES=$(cat lerna_output | grep "liquidator")
            if [ "$PACKAGES_CHANGES" = "@uma/liquidator" ]; then
                yarn run test-concurrent-test;
            else
                circleci-agent step halt;
            fi
  test_common:
    docker:
      - image: circleci/node:lts
      - image: trufflesuite/ganache-cli
        command: ganache-cli -i 1234 -l 9000000 -p 9545
    working_directory: ~/protocol
    resource_class: large
    steps:
      - restore_cache:
          key: protocol-completed-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run tests
          command: |
            ./scripts/lerna_packages.sh
            export PACKAGES_CHANGES=$(cat lerna_output | grep "common")
            if [ "$PACKAGES_CHANGES" = "@uma/common" ]; then
                yarn run test-concurrent-test;
            else
                circleci-agent step halt;
            fi
  test_disputer:
    docker:
      - image: circleci/node:lts
      - image: trufflesuite/ganache-cli
        command: ganache-cli -i 1234 -l 9000000 -p 9545
    working_directory: ~/protocol
    resource_class: large
    steps:
      - restore_cache:
          key: protocol-completed-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run tests
          command: |
            ./scripts/lerna_packages.sh
            export PACKAGES_CHANGES=$(cat lerna_output | grep "disputer")
            if [ "$PACKAGES_CHANGES" = "@uma/disputer" ]; then
                yarn run test-concurrent-test;
            else
                circleci-agent step halt;
            fi
  test_financial_templates_lib:
    docker:
      - image: circleci/node:lts
      - image: trufflesuite/ganache-cli
        command: ganache-cli -i 1234 -l 9000000 -p 9545
    working_directory: ~/protocol
    resource_class: large
    steps:
      - restore_cache:
          key: protocol-completed-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run tests
          command: |
            ./scripts/lerna_packages.sh
            export PACKAGES_CHANGES=$(cat lerna_output | grep "financial-templates-lib")
            if [ "$PACKAGES_CHANGES" = "@uma/financial-templates-lib" ]; then
                yarn run test-concurrent-test;
            else
                circleci-agent step halt;
            fi
  test_funding_rate_proposer:
    docker:
      - image: circleci/node:lts
      - image: trufflesuite/ganache-cli
        command: ganache-cli -i 1234 -l 9000000 -p 9545
    working_directory: ~/protocol
    resource_class: large
    steps:
      - restore_cache:
          key: protocol-completed-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run tests
          command: |
            ./scripts/lerna_packages.sh
            export PACKAGES_CHANGES=$(cat lerna_output | grep "funding-rate-proposer")
            if [ "$PACKAGES_CHANGES" = "@uma/funding-rate-proposer" ]; then
                yarn run test-concurrent-test;
            else
                circleci-agent step halt;
            fi
  test_merkle_distributor:
    docker:
      - image: circleci/node:lts
      - image: trufflesuite/ganache-cli
        command: ganache-cli -i 1234 -l 9000000 -p 9545
    working_directory: ~/protocol
    resource_class: large
    steps:
      - restore_cache:
          key: protocol-completed-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run tests
          command: |
            ./scripts/lerna_packages.sh
            export PACKAGES_CHANGES=$(cat lerna_output | grep "merkle-distributor")
            if [ "$PACKAGES_CHANGES" = "@uma/merkle-distributor" ]; then
                yarn run test-concurrent-test;
            else
                circleci-agent step halt;
            fi
  test_monitors:
    docker:
      - image: circleci/node:lts
      - image: trufflesuite/ganache-cli
        command: ganache-cli -i 1234 -l 9000000 -p 9545
    working_directory: ~/protocol
    resource_class: large
    steps:
      - restore_cache:
          key: protocol-completed-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run tests
          command: |
            ./scripts/lerna_packages.sh
            export PACKAGES_CHANGES=$(cat lerna_output | grep "monitors")
            if [ "$PACKAGES_CHANGES" = "@uma/monitors" ]; then
                yarn run test-concurrent-test;
            else
                circleci-agent step halt;
            fi
  test_optimistic_oracle:
    docker:
      - image: circleci/node:lts
      - image: trufflesuite/ganache-cli
        command: ganache-cli -i 1234 -l 9000000 -p 9545
    working_directory: ~/protocol
    resource_class: large
    steps:
      - restore_cache:
          key: protocol-completed-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run tests
          command: |
            ./scripts/lerna_packages.sh
            export PACKAGES_CHANGES=$(cat lerna_output | grep "optimistic-oracle")
            if [ "$PACKAGES_CHANGES" = "@uma/optimistic-oracle" ]; then
                yarn run test-concurrent-test;
            else
                circleci-agent step halt;
            fi
  test_reporters:
    docker:
      - image: circleci/node:lts
      - image: trufflesuite/ganache-cli
        command: ganache-cli -i 1234 -l 9000000 -p 9545
    working_directory: ~/protocol
    resource_class: large
    steps:
      - restore_cache:
          key: protocol-completed-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run tests
          command: |
            ./scripts/lerna_packages.sh
            export PACKAGES_CHANGES=$(cat lerna_output | grep "reporters")
            if [ "$PACKAGES_CHANGES" = "@uma/reporters" ]; then
                yarn run test-concurrent-test;
            else
                circleci-agent step halt;
            fi

  coverage:
    docker:
      - image: circleci/node:lts
    working_directory: ~/protocol
    steps:
      - checkout
      - restore_cache:
          key: protocol-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Run coverage
          command: ./ci/coverage.sh ~/protocol/packages/core
      - store_artifacts:
          path: packages/core/coverage
  dapp_build:
    docker:
      - image: circleci/node:lts
    working_directory: ~/protocol
    steps:
      - restore_cache:
          key: protocol-completed-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Apply Deployment Registry
          command: yarn run load-addresses
      - run:
          name: Build Voter dApp
          working_directory: ~/protocol/packages/voter-dapp
          command: CI=false yarn run build
      - store_artifacts:
          path: ~/protocol/packages/voter-dapp/build
          destination: voter-dapp-build
  deploy_to_staging:
    docker:
      - image: circleci/node:lts
    working_directory: ~/protocol
    steps:
      - restore_cache:
          key: protocol-completed-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install Prereqs
          command: sudo apt-get update && sudo apt-get install -y libudev-dev libusb-1.0-0-dev yarn
      - run:
          name: Install Pandoc
          command: wget https://github.com/jgm/pandoc/releases/download/2.7.3/pandoc-2.7.3-linux.tar.gz
      - run:
          name: Untar Pandoc
          command: sudo tar xvzf pandoc-2.7.3-linux.tar.gz --strip-components 1 -C /usr/local
      - run:
          name: Deploy Dapp
          command: ./ci/deploy_to_staging.sh
  publish:
    docker:
      - image: circleci/node:lts
    working_directory: ~/protocol
    steps:
      - add_ssh_keys:
          fingerprints:
            - "e5:da:db:1a:1d:66:5b:e7:f5:43:f2:24:1c:56:6a:97"
      - restore_cache:
          key: protocol-completed-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install Prereqs
          command: sudo apt-get update && sudo apt-get install -y libudev-dev libusb-1.0-0-dev yarn
      - run:
          name: Publish
          command: yarn run publish-release

workflows:
  version: 2
  build_and_test:
    jobs:
      - checkout_and_install
      - build:
          requires:
            - checkout_and_install
      - lint:
          requires:
            - checkout_and_install
      - test_core:
          context: api_keys
          requires:
            - build
      - test_liquidator:
          context: api_keys
          requires:
            - build
      - test_common:
          context: api_keys
          requires:
            - build
      - test_disputer:
          context: api_keys
          requires:
            - build
      - test_financial_templates_lib:
          context: api_keys
          requires:
            - build
      - test_funding_rate_proposer:
          context: api_keys
          requires:
            - build
      - test_merkle_distributor:
          context: api_keys
          requires:
            - build
      - test_monitors:
          context: api_keys
          requires:
            - build
      - test_optimistic_oracle:
          context: api_keys
          requires:
            - build
      - test_reporters:
          context: api_keys
          requires:
            - build
      - docs:
          requires:
            - checkout_and_install
      - dapp_build:
          requires:
            - build
      - deploy_to_staging:
          context: gcloud
          requires:
            - dapp_build
            - test
          filters:
            branches:
              only: master
      - publish:
          context: api_keys
          requires:
            - build
            - test
          filters:
            branches:
              only: master
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - checkout_and_install
      - coverage:
          requires:
            - checkout_and_install
